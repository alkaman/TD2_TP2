
TP2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f54  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08003064  08003064  00013064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030f0  080030f0  00020024  2**0
                  CONTENTS
  4 .ARM          00000000  080030f0  080030f0  00020024  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030f0  080030f0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030f0  080030f0  000130f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030f4  080030f4  000130f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  080030f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001420  20000024  0800311c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001444  0800311c  00021444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e52f  00000000  00000000  0002004d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000233b  00000000  00000000  0002e57c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd0  00000000  00000000  000308b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cb8  00000000  00000000  00031688  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015b63  00000000  00000000  00032340  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a3ca  00000000  00000000  00047ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00077a9c  00000000  00000000  0005226d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c9d09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000381c  00000000  00000000  000c9d84  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000024 	.word	0x20000024
 800012c:	00000000 	.word	0x00000000
 8000130:	0800304c 	.word	0x0800304c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000028 	.word	0x20000028
 800014c:	0800304c 	.word	0x0800304c

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	; (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	; (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	; 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000040 	.word	0x20000040
 800017c:	20000094 	.word	0x20000094

08000180 <main>:
void TareaRandom(void *p);
void mandar_tiempo(void *p);
unsigned long xor128(void);

int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b08a      	sub	sp, #40	; 0x28
 8000184:	af02      	add	r7, sp, #8

	HAL_Init();
 8000186:	f000 fbf3 	bl	8000970 <HAL_Init>

	SystemClock_Config();
 800018a:	f000 f859 	bl	8000240 <SystemClock_Config>


	MX_GPIO_Init();
 800018e:	f000 f89d 	bl	80002cc <MX_GPIO_Init>

	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000192:	4b1e      	ldr	r3, [pc, #120]	; (800020c <main+0x8c>)
 8000194:	1d3c      	adds	r4, r7, #4
 8000196:	461d      	mov	r5, r3
 8000198:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800019a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800019c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2100      	movs	r1, #0
 80001a8:	4618      	mov	r0, r3
 80001aa:	f001 fccb 	bl	8001b44 <osThreadCreate>
 80001ae:	4602      	mov	r2, r0
 80001b0:	4b17      	ldr	r3, [pc, #92]	; (8000210 <main+0x90>)
 80001b2:	601a      	str	r2, [r3, #0]

	xTaskCreate(TareaPrior,"tarea_prior",128,NULL,tskIDLE_PRIORITY + 3,NULL);
 80001b4:	2300      	movs	r3, #0
 80001b6:	9301      	str	r3, [sp, #4]
 80001b8:	2303      	movs	r3, #3
 80001ba:	9300      	str	r3, [sp, #0]
 80001bc:	2300      	movs	r3, #0
 80001be:	2280      	movs	r2, #128	; 0x80
 80001c0:	4914      	ldr	r1, [pc, #80]	; (8000214 <main+0x94>)
 80001c2:	4815      	ldr	r0, [pc, #84]	; (8000218 <main+0x98>)
 80001c4:	f001 fe26 	bl	8001e14 <xTaskCreate>
	xTaskCreate(TareaLed1,"tarea_led1",128,NULL,tskIDLE_PRIORITY + 1,&xHandleLed1);
 80001c8:	4b14      	ldr	r3, [pc, #80]	; (800021c <main+0x9c>)
 80001ca:	9301      	str	r3, [sp, #4]
 80001cc:	2301      	movs	r3, #1
 80001ce:	9300      	str	r3, [sp, #0]
 80001d0:	2300      	movs	r3, #0
 80001d2:	2280      	movs	r2, #128	; 0x80
 80001d4:	4912      	ldr	r1, [pc, #72]	; (8000220 <main+0xa0>)
 80001d6:	4813      	ldr	r0, [pc, #76]	; (8000224 <main+0xa4>)
 80001d8:	f001 fe1c 	bl	8001e14 <xTaskCreate>
	xTaskCreate(TareaLed2,"tarea_led2",128,NULL,tskIDLE_PRIORITY + 1,&xHandleLed2);
 80001dc:	4b12      	ldr	r3, [pc, #72]	; (8000228 <main+0xa8>)
 80001de:	9301      	str	r3, [sp, #4]
 80001e0:	2301      	movs	r3, #1
 80001e2:	9300      	str	r3, [sp, #0]
 80001e4:	2300      	movs	r3, #0
 80001e6:	2280      	movs	r2, #128	; 0x80
 80001e8:	4910      	ldr	r1, [pc, #64]	; (800022c <main+0xac>)
 80001ea:	4811      	ldr	r0, [pc, #68]	; (8000230 <main+0xb0>)
 80001ec:	f001 fe12 	bl	8001e14 <xTaskCreate>
	xTaskCreate(TareaLed3,"tarea_led3",128,NULL,tskIDLE_PRIORITY + 1,&xHandleLed3);
 80001f0:	4b10      	ldr	r3, [pc, #64]	; (8000234 <main+0xb4>)
 80001f2:	9301      	str	r3, [sp, #4]
 80001f4:	2301      	movs	r3, #1
 80001f6:	9300      	str	r3, [sp, #0]
 80001f8:	2300      	movs	r3, #0
 80001fa:	2280      	movs	r2, #128	; 0x80
 80001fc:	490e      	ldr	r1, [pc, #56]	; (8000238 <main+0xb8>)
 80001fe:	480f      	ldr	r0, [pc, #60]	; (800023c <main+0xbc>)
 8000200:	f001 fe08 	bl	8001e14 <xTaskCreate>

	osKernelStart();
 8000204:	f001 fc97 	bl	8001b36 <osKernelStart>

	while (1)
 8000208:	e7fe      	b.n	8000208 <main+0x88>
 800020a:	bf00      	nop
 800020c:	080030a0 	.word	0x080030a0
 8000210:	200013ec 	.word	0x200013ec
 8000214:	08003064 	.word	0x08003064
 8000218:	08000495 	.word	0x08000495
 800021c:	200013f0 	.word	0x200013f0
 8000220:	08003070 	.word	0x08003070
 8000224:	080003ed 	.word	0x080003ed
 8000228:	200013f4 	.word	0x200013f4
 800022c:	0800307c 	.word	0x0800307c
 8000230:	08000425 	.word	0x08000425
 8000234:	200013f8 	.word	0x200013f8
 8000238:	08003088 	.word	0x08003088
 800023c:	0800045d 	.word	0x0800045d

08000240 <SystemClock_Config>:
	}
}


void SystemClock_Config(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b090      	sub	sp, #64	; 0x40
 8000244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000246:	f107 0318 	add.w	r3, r7, #24
 800024a:	2228      	movs	r2, #40	; 0x28
 800024c:	2100      	movs	r1, #0
 800024e:	4618      	mov	r0, r3
 8000250:	f002 fef4 	bl	800303c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000254:	1d3b      	adds	r3, r7, #4
 8000256:	2200      	movs	r2, #0
 8000258:	601a      	str	r2, [r3, #0]
 800025a:	605a      	str	r2, [r3, #4]
 800025c:	609a      	str	r2, [r3, #8]
 800025e:	60da      	str	r2, [r3, #12]
 8000260:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000262:	2301      	movs	r3, #1
 8000264:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800026c:	2300      	movs	r3, #0
 800026e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000274:	2302      	movs	r3, #2
 8000276:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000278:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800027c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800027e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000282:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000284:	f107 0318 	add.w	r3, r7, #24
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fe0d 	bl	8000ea8 <HAL_RCC_OscConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000294:	f000 fa5c 	bl	8000750 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000298:	230f      	movs	r3, #15
 800029a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800029c:	2302      	movs	r3, #2
 800029e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002aa:	2300      	movs	r3, #0
 80002ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	2102      	movs	r1, #2
 80002b2:	4618      	mov	r0, r3
 80002b4:	f001 f878 	bl	80013a8 <HAL_RCC_ClockConfig>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002be:	f000 fa47 	bl	8000750 <Error_Handler>
  }
}
 80002c2:	bf00      	nop
 80002c4:	3740      	adds	r7, #64	; 0x40
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bd80      	pop	{r7, pc}
	...

080002cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b088      	sub	sp, #32
 80002d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002e0:	4b3f      	ldr	r3, [pc, #252]	; (80003e0 <MX_GPIO_Init+0x114>)
 80002e2:	699b      	ldr	r3, [r3, #24]
 80002e4:	4a3e      	ldr	r2, [pc, #248]	; (80003e0 <MX_GPIO_Init+0x114>)
 80002e6:	f043 0310 	orr.w	r3, r3, #16
 80002ea:	6193      	str	r3, [r2, #24]
 80002ec:	4b3c      	ldr	r3, [pc, #240]	; (80003e0 <MX_GPIO_Init+0x114>)
 80002ee:	699b      	ldr	r3, [r3, #24]
 80002f0:	f003 0310 	and.w	r3, r3, #16
 80002f4:	60fb      	str	r3, [r7, #12]
 80002f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002f8:	4b39      	ldr	r3, [pc, #228]	; (80003e0 <MX_GPIO_Init+0x114>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a38      	ldr	r2, [pc, #224]	; (80003e0 <MX_GPIO_Init+0x114>)
 80002fe:	f043 0320 	orr.w	r3, r3, #32
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b36      	ldr	r3, [pc, #216]	; (80003e0 <MX_GPIO_Init+0x114>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0320 	and.w	r3, r3, #32
 800030c:	60bb      	str	r3, [r7, #8]
 800030e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000310:	4b33      	ldr	r3, [pc, #204]	; (80003e0 <MX_GPIO_Init+0x114>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a32      	ldr	r2, [pc, #200]	; (80003e0 <MX_GPIO_Init+0x114>)
 8000316:	f043 0304 	orr.w	r3, r3, #4
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b30      	ldr	r3, [pc, #192]	; (80003e0 <MX_GPIO_Init+0x114>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0304 	and.w	r3, r3, #4
 8000324:	607b      	str	r3, [r7, #4]
 8000326:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000328:	4b2d      	ldr	r3, [pc, #180]	; (80003e0 <MX_GPIO_Init+0x114>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a2c      	ldr	r2, [pc, #176]	; (80003e0 <MX_GPIO_Init+0x114>)
 800032e:	f043 0308 	orr.w	r3, r3, #8
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b2a      	ldr	r3, [pc, #168]	; (80003e0 <MX_GPIO_Init+0x114>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0308 	and.w	r3, r3, #8
 800033c:	603b      	str	r3, [r7, #0]
 800033e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000340:	2200      	movs	r2, #0
 8000342:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000346:	4827      	ldr	r0, [pc, #156]	; (80003e4 <MX_GPIO_Init+0x118>)
 8000348:	f000 fd95 	bl	8000e76 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800034c:	2200      	movs	r2, #0
 800034e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000352:	4825      	ldr	r0, [pc, #148]	; (80003e8 <MX_GPIO_Init+0x11c>)
 8000354:	f000 fd8f 	bl	8000e76 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800035e:	4822      	ldr	r0, [pc, #136]	; (80003e8 <MX_GPIO_Init+0x11c>)
 8000360:	f000 fd89 	bl	8000e76 <HAL_GPIO_WritePin>


  //Setup Leds
  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000364:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000368:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800036a:	2301      	movs	r3, #1
 800036c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036e:	2300      	movs	r3, #0
 8000370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000372:	2302      	movs	r3, #2
 8000374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000376:	f107 0310 	add.w	r3, r7, #16
 800037a:	4619      	mov	r1, r3
 800037c:	4819      	ldr	r0, [pc, #100]	; (80003e4 <MX_GPIO_Init+0x118>)
 800037e:	f000 fc09 	bl	8000b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000386:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000388:	2301      	movs	r3, #1
 800038a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038c:	2300      	movs	r3, #0
 800038e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000390:	2302      	movs	r3, #2
 8000392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	4619      	mov	r1, r3
 800039a:	4813      	ldr	r0, [pc, #76]	; (80003e8 <MX_GPIO_Init+0x11c>)
 800039c:	f000 fbfa 	bl	8000b94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80003a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003a6:	2301      	movs	r3, #1
 80003a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ae:	2302      	movs	r3, #2
 80003b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003b2:	f107 0310 	add.w	r3, r7, #16
 80003b6:	4619      	mov	r1, r3
 80003b8:	480b      	ldr	r0, [pc, #44]	; (80003e8 <MX_GPIO_Init+0x11c>)
 80003ba:	f000 fbeb 	bl	8000b94 <HAL_GPIO_Init>


  /*Configuro Pulsador*/
  /*Configure GPIO pin : PB6 */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80003be:	2340      	movs	r3, #64	; 0x40
 80003c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003c2:	2300      	movs	r3, #0
 80003c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80003c6:	2302      	movs	r3, #2
 80003c8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ca:	f107 0310 	add.w	r3, r7, #16
 80003ce:	4619      	mov	r1, r3
 80003d0:	4805      	ldr	r0, [pc, #20]	; (80003e8 <MX_GPIO_Init+0x11c>)
 80003d2:	f000 fbdf 	bl	8000b94 <HAL_GPIO_Init>

}
 80003d6:	bf00      	nop
 80003d8:	3720      	adds	r7, #32
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	40021000 	.word	0x40021000
 80003e4:	40011000 	.word	0x40011000
 80003e8:	40010c00 	.word	0x40010c00

080003ec <TareaLed1>:

/* USER CODE BEGIN 4 */
/*Tarea que enciende Led 1 y apaga Led 2 y 3*/
void TareaLed1(void *p)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b082      	sub	sp, #8
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		//GPIOC -> ODR |= GPIO_PIN_13;
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);//Prende con estado RESET por ser activo bajo
 80003f4:	2200      	movs	r2, #0
 80003f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003fa:	4808      	ldr	r0, [pc, #32]	; (800041c <TareaLed1+0x30>)
 80003fc:	f000 fd3b 	bl	8000e76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000400:	2200      	movs	r2, #0
 8000402:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000406:	4806      	ldr	r0, [pc, #24]	; (8000420 <TareaLed1+0x34>)
 8000408:	f000 fd35 	bl	8000e76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000412:	4803      	ldr	r0, [pc, #12]	; (8000420 <TareaLed1+0x34>)
 8000414:	f000 fd2f 	bl	8000e76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);//Prende con estado RESET por ser activo bajo
 8000418:	e7ec      	b.n	80003f4 <TareaLed1+0x8>
 800041a:	bf00      	nop
 800041c:	40011000 	.word	0x40011000
 8000420:	40010c00 	.word	0x40010c00

08000424 <TareaLed2>:
	}
}

/*Tarea que enciende Led 2 y apaga Led 1 y 3*/
void TareaLed2(void *p)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	b082      	sub	sp, #8
 8000428:	af00      	add	r7, sp, #0
 800042a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
		//GPIOC -> ODR &= GPIO_PIN_13;
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800042c:	2201      	movs	r2, #1
 800042e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000432:	4808      	ldr	r0, [pc, #32]	; (8000454 <TareaLed2+0x30>)
 8000434:	f000 fd1f 	bl	8000e76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 8000438:	2201      	movs	r2, #1
 800043a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043e:	4806      	ldr	r0, [pc, #24]	; (8000458 <TareaLed2+0x34>)
 8000440:	f000 fd19 	bl	8000e76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000444:	2200      	movs	r2, #0
 8000446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800044a:	4803      	ldr	r0, [pc, #12]	; (8000458 <TareaLed2+0x34>)
 800044c:	f000 fd13 	bl	8000e76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000450:	e7ec      	b.n	800042c <TareaLed2+0x8>
 8000452:	bf00      	nop
 8000454:	40011000 	.word	0x40011000
 8000458:	40010c00 	.word	0x40010c00

0800045c <TareaLed3>:
	}
}

/*Tarea que enciende Led 3 y apaga Led 1 y 2*/
void TareaLed3(void *p)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000464:	2201      	movs	r2, #1
 8000466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046a:	4808      	ldr	r0, [pc, #32]	; (800048c <TareaLed3+0x30>)
 800046c:	f000 fd03 	bl	8000e76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000470:	2200      	movs	r2, #0
 8000472:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000476:	4806      	ldr	r0, [pc, #24]	; (8000490 <TareaLed3+0x34>)
 8000478:	f000 fcfd 	bl	8000e76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 800047c:	2201      	movs	r2, #1
 800047e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000482:	4803      	ldr	r0, [pc, #12]	; (8000490 <TareaLed3+0x34>)
 8000484:	f000 fcf7 	bl	8000e76 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000488:	e7ec      	b.n	8000464 <TareaLed3+0x8>
 800048a:	bf00      	nop
 800048c:	40011000 	.word	0x40011000
 8000490:	40010c00 	.word	0x40010c00

08000494 <TareaPrior>:
	}
}

/*Tarea que lee el pulsador y amodifica la prioridad a las tareas de los leds*/
void TareaPrior(void *p)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b084      	sub	sp, #16
 8000498:	af00      	add	r7, sp, #0
 800049a:	6078      	str	r0, [r7, #4]
	static int ticks_start=0;
	static int ticks_end=0;
	int ticks=0;
 800049c:	2300      	movs	r3, #0
 800049e:	60bb      	str	r3, [r7, #8]
	static int estado=1;
	unsigned long Random;

	while(1)
	{
		switch(estado)//Maquina de estados Pulsador
 80004a0:	4b7d      	ldr	r3, [pc, #500]	; (8000698 <TareaPrior+0x204>)
 80004a2:	681b      	ldr	r3, [r3, #0]
 80004a4:	2b02      	cmp	r3, #2
 80004a6:	d014      	beq.n	80004d2 <TareaPrior+0x3e>
 80004a8:	2b03      	cmp	r3, #3
 80004aa:	d025      	beq.n	80004f8 <TareaPrior+0x64>
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d142      	bne.n	8000536 <TareaPrior+0xa2>
		{
		case 1:
			if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == pdPASS)
 80004b0:	2140      	movs	r1, #64	; 0x40
 80004b2:	487a      	ldr	r0, [pc, #488]	; (800069c <TareaPrior+0x208>)
 80004b4:	f000 fcc8 	bl	8000e48 <HAL_GPIO_ReadPin>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d13f      	bne.n	800053e <TareaPrior+0xaa>
			{
				ticks_start=xTaskGetTickCount();
 80004be:	f001 ffc1 	bl	8002444 <xTaskGetTickCount>
 80004c2:	4603      	mov	r3, r0
 80004c4:	461a      	mov	r2, r3
 80004c6:	4b76      	ldr	r3, [pc, #472]	; (80006a0 <TareaPrior+0x20c>)
 80004c8:	601a      	str	r2, [r3, #0]
				estado=2;
 80004ca:	4b73      	ldr	r3, [pc, #460]	; (8000698 <TareaPrior+0x204>)
 80004cc:	2202      	movs	r2, #2
 80004ce:	601a      	str	r2, [r3, #0]
			}
			break;
 80004d0:	e035      	b.n	800053e <TareaPrior+0xaa>
		case 2:
			ticks_end=xTaskGetTickCount();
 80004d2:	f001 ffb7 	bl	8002444 <xTaskGetTickCount>
 80004d6:	4603      	mov	r3, r0
 80004d8:	461a      	mov	r2, r3
 80004da:	4b72      	ldr	r3, [pc, #456]	; (80006a4 <TareaPrior+0x210>)
 80004dc:	601a      	str	r2, [r3, #0]
			ticks=ticks_end-ticks_start;
 80004de:	4b71      	ldr	r3, [pc, #452]	; (80006a4 <TareaPrior+0x210>)
 80004e0:	681a      	ldr	r2, [r3, #0]
 80004e2:	4b6f      	ldr	r3, [pc, #444]	; (80006a0 <TareaPrior+0x20c>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	1ad3      	subs	r3, r2, r3
 80004e8:	60bb      	str	r3, [r7, #8]
			if(ticks>50)//Pasados los 50 ticks, cambio a estado 3
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	2b32      	cmp	r3, #50	; 0x32
 80004ee:	dd28      	ble.n	8000542 <TareaPrior+0xae>
			{
				estado=3;
 80004f0:	4b69      	ldr	r3, [pc, #420]	; (8000698 <TareaPrior+0x204>)
 80004f2:	2203      	movs	r2, #3
 80004f4:	601a      	str	r2, [r3, #0]
			}
			break;
 80004f6:	e024      	b.n	8000542 <TareaPrior+0xae>
		case 3:
			if(Prioridad<4)
 80004f8:	4b6b      	ldr	r3, [pc, #428]	; (80006a8 <TareaPrior+0x214>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	2b03      	cmp	r3, #3
 80004fe:	dc13      	bgt.n	8000528 <TareaPrior+0x94>
			{
				Prioridad++;
 8000500:	4b69      	ldr	r3, [pc, #420]	; (80006a8 <TareaPrior+0x214>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	3301      	adds	r3, #1
 8000506:	4a68      	ldr	r2, [pc, #416]	; (80006a8 <TareaPrior+0x214>)
 8000508:	6013      	str	r3, [r2, #0]
				if(Prioridad == 4)//Genero el numero random si es el caso 4
 800050a:	4b67      	ldr	r3, [pc, #412]	; (80006a8 <TareaPrior+0x214>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b04      	cmp	r3, #4
 8000510:	d10d      	bne.n	800052e <TareaPrior+0x9a>
				{
					Random=xor128();
 8000512:	f000 f8d1 	bl	80006b8 <xor128>
 8000516:	60f8      	str	r0, [r7, #12]
					Random=Random && 0x00000003;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	2b00      	cmp	r3, #0
 800051c:	bf14      	ite	ne
 800051e:	2301      	movne	r3, #1
 8000520:	2300      	moveq	r3, #0
 8000522:	b2db      	uxtb	r3, r3
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	e002      	b.n	800052e <TareaPrior+0x9a>
				}
			}
			else
			{
				Prioridad=0;
 8000528:	4b5f      	ldr	r3, [pc, #380]	; (80006a8 <TareaPrior+0x214>)
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
			}
			estado=1;
 800052e:	4b5a      	ldr	r3, [pc, #360]	; (8000698 <TareaPrior+0x204>)
 8000530:	2201      	movs	r2, #1
 8000532:	601a      	str	r2, [r3, #0]
			break;
 8000534:	e006      	b.n	8000544 <TareaPrior+0xb0>
		default:
			estado=1;
 8000536:	4b58      	ldr	r3, [pc, #352]	; (8000698 <TareaPrior+0x204>)
 8000538:	2201      	movs	r2, #1
 800053a:	601a      	str	r2, [r3, #0]
			break;
 800053c:	e002      	b.n	8000544 <TareaPrior+0xb0>
			break;
 800053e:	bf00      	nop
 8000540:	e000      	b.n	8000544 <TareaPrior+0xb0>
			break;
 8000542:	bf00      	nop
		}
		switch(Prioridad)//Lógica de salida Prioridad
 8000544:	4b58      	ldr	r3, [pc, #352]	; (80006a8 <TareaPrior+0x214>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	2b04      	cmp	r3, #4
 800054a:	f200 809c 	bhi.w	8000686 <TareaPrior+0x1f2>
 800054e:	a201      	add	r2, pc, #4	; (adr r2, 8000554 <TareaPrior+0xc0>)
 8000550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000554:	08000569 	.word	0x08000569
 8000558:	0800058f 	.word	0x0800058f
 800055c:	080005b5 	.word	0x080005b5
 8000560:	080005db 	.word	0x080005db
 8000564:	08000601 	.word	0x08000601
		{
		case 0:
			vTaskPrioritySet( xHandleLed1, tskIDLE_PRIORITY + 1);
 8000568:	4b50      	ldr	r3, [pc, #320]	; (80006ac <TareaPrior+0x218>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2101      	movs	r1, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f001 fdb2 	bl	80020d8 <vTaskPrioritySet>
			vTaskPrioritySet( xHandleLed2, tskIDLE_PRIORITY + 1);
 8000574:	4b4e      	ldr	r3, [pc, #312]	; (80006b0 <TareaPrior+0x21c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2101      	movs	r1, #1
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fdac 	bl	80020d8 <vTaskPrioritySet>
			vTaskPrioritySet( xHandleLed3, tskIDLE_PRIORITY + 1);
 8000580:	4b4c      	ldr	r3, [pc, #304]	; (80006b4 <TareaPrior+0x220>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2101      	movs	r1, #1
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fda6 	bl	80020d8 <vTaskPrioritySet>
			break;
 800058c:	e080      	b.n	8000690 <TareaPrior+0x1fc>
		case 1:
			vTaskPrioritySet( xHandleLed1, tskIDLE_PRIORITY + 2);
 800058e:	4b47      	ldr	r3, [pc, #284]	; (80006ac <TareaPrior+0x218>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2102      	movs	r1, #2
 8000594:	4618      	mov	r0, r3
 8000596:	f001 fd9f 	bl	80020d8 <vTaskPrioritySet>
			vTaskPrioritySet( xHandleLed2, tskIDLE_PRIORITY + 1);
 800059a:	4b45      	ldr	r3, [pc, #276]	; (80006b0 <TareaPrior+0x21c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	2101      	movs	r1, #1
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 fd99 	bl	80020d8 <vTaskPrioritySet>
			vTaskPrioritySet( xHandleLed3, tskIDLE_PRIORITY + 1);
 80005a6:	4b43      	ldr	r3, [pc, #268]	; (80006b4 <TareaPrior+0x220>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2101      	movs	r1, #1
 80005ac:	4618      	mov	r0, r3
 80005ae:	f001 fd93 	bl	80020d8 <vTaskPrioritySet>
			break;
 80005b2:	e06d      	b.n	8000690 <TareaPrior+0x1fc>
		case 2:
			vTaskPrioritySet( xHandleLed1, tskIDLE_PRIORITY + 1);
 80005b4:	4b3d      	ldr	r3, [pc, #244]	; (80006ac <TareaPrior+0x218>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	2101      	movs	r1, #1
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fd8c 	bl	80020d8 <vTaskPrioritySet>
			vTaskPrioritySet( xHandleLed2, tskIDLE_PRIORITY + 2);
 80005c0:	4b3b      	ldr	r3, [pc, #236]	; (80006b0 <TareaPrior+0x21c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	2102      	movs	r1, #2
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 fd86 	bl	80020d8 <vTaskPrioritySet>
			vTaskPrioritySet( xHandleLed3, tskIDLE_PRIORITY + 1);
 80005cc:	4b39      	ldr	r3, [pc, #228]	; (80006b4 <TareaPrior+0x220>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2101      	movs	r1, #1
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fd80 	bl	80020d8 <vTaskPrioritySet>
			break;
 80005d8:	e05a      	b.n	8000690 <TareaPrior+0x1fc>
		case 3:
			vTaskPrioritySet( xHandleLed1, tskIDLE_PRIORITY + 1);
 80005da:	4b34      	ldr	r3, [pc, #208]	; (80006ac <TareaPrior+0x218>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2101      	movs	r1, #1
 80005e0:	4618      	mov	r0, r3
 80005e2:	f001 fd79 	bl	80020d8 <vTaskPrioritySet>
			vTaskPrioritySet( xHandleLed2, tskIDLE_PRIORITY + 1);
 80005e6:	4b32      	ldr	r3, [pc, #200]	; (80006b0 <TareaPrior+0x21c>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	2101      	movs	r1, #1
 80005ec:	4618      	mov	r0, r3
 80005ee:	f001 fd73 	bl	80020d8 <vTaskPrioritySet>
			vTaskPrioritySet( xHandleLed3, tskIDLE_PRIORITY + 2);
 80005f2:	4b30      	ldr	r3, [pc, #192]	; (80006b4 <TareaPrior+0x220>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	2102      	movs	r1, #2
 80005f8:	4618      	mov	r0, r3
 80005fa:	f001 fd6d 	bl	80020d8 <vTaskPrioritySet>
			break;
 80005fe:	e047      	b.n	8000690 <TareaPrior+0x1fc>
		case 4:
			if(Random == 1 && Random == 0)
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d114      	bne.n	8000630 <TareaPrior+0x19c>
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d111      	bne.n	8000630 <TareaPrior+0x19c>
			{
				vTaskPrioritySet( xHandleLed1, tskIDLE_PRIORITY + 2);
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <TareaPrior+0x218>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	2102      	movs	r1, #2
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fd60 	bl	80020d8 <vTaskPrioritySet>
				vTaskPrioritySet( xHandleLed2, tskIDLE_PRIORITY + 1);
 8000618:	4b25      	ldr	r3, [pc, #148]	; (80006b0 <TareaPrior+0x21c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	2101      	movs	r1, #1
 800061e:	4618      	mov	r0, r3
 8000620:	f001 fd5a 	bl	80020d8 <vTaskPrioritySet>
				vTaskPrioritySet( xHandleLed3, tskIDLE_PRIORITY + 1);
 8000624:	4b23      	ldr	r3, [pc, #140]	; (80006b4 <TareaPrior+0x220>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	2101      	movs	r1, #1
 800062a:	4618      	mov	r0, r3
 800062c:	f001 fd54 	bl	80020d8 <vTaskPrioritySet>
			}
			if(Random == 2)
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2b02      	cmp	r3, #2
 8000634:	d111      	bne.n	800065a <TareaPrior+0x1c6>
			{
				vTaskPrioritySet( xHandleLed1, tskIDLE_PRIORITY + 1);
 8000636:	4b1d      	ldr	r3, [pc, #116]	; (80006ac <TareaPrior+0x218>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2101      	movs	r1, #1
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fd4b 	bl	80020d8 <vTaskPrioritySet>
				vTaskPrioritySet( xHandleLed2, tskIDLE_PRIORITY + 2);
 8000642:	4b1b      	ldr	r3, [pc, #108]	; (80006b0 <TareaPrior+0x21c>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2102      	movs	r1, #2
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fd45 	bl	80020d8 <vTaskPrioritySet>
				vTaskPrioritySet( xHandleLed3, tskIDLE_PRIORITY + 1);
 800064e:	4b19      	ldr	r3, [pc, #100]	; (80006b4 <TareaPrior+0x220>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	2101      	movs	r1, #1
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fd3f 	bl	80020d8 <vTaskPrioritySet>
			}
			if(Random == 3)
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	2b03      	cmp	r3, #3
 800065e:	d116      	bne.n	800068e <TareaPrior+0x1fa>
			{
				vTaskPrioritySet( xHandleLed1, tskIDLE_PRIORITY + 1);
 8000660:	4b12      	ldr	r3, [pc, #72]	; (80006ac <TareaPrior+0x218>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2101      	movs	r1, #1
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fd36 	bl	80020d8 <vTaskPrioritySet>
				vTaskPrioritySet( xHandleLed2, tskIDLE_PRIORITY + 1);
 800066c:	4b10      	ldr	r3, [pc, #64]	; (80006b0 <TareaPrior+0x21c>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	2101      	movs	r1, #1
 8000672:	4618      	mov	r0, r3
 8000674:	f001 fd30 	bl	80020d8 <vTaskPrioritySet>
				vTaskPrioritySet( xHandleLed3, tskIDLE_PRIORITY + 2);
 8000678:	4b0e      	ldr	r3, [pc, #56]	; (80006b4 <TareaPrior+0x220>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	2102      	movs	r1, #2
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fd2a 	bl	80020d8 <vTaskPrioritySet>
			}
			break;
 8000684:	e003      	b.n	800068e <TareaPrior+0x1fa>
		default:
			Prioridad=0;
 8000686:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <TareaPrior+0x214>)
 8000688:	2200      	movs	r2, #0
 800068a:	601a      	str	r2, [r3, #0]
			break;
 800068c:	e000      	b.n	8000690 <TareaPrior+0x1fc>
			break;
 800068e:	bf00      	nop
		}
	vTaskDelay(1);//Si no asigno demora, nunca llega a ejecutar ninguna de las otras tareas por que esta tarea siempre va a estar disponible
 8000690:	2001      	movs	r0, #1
 8000692:	f001 fced 	bl	8002070 <vTaskDelay>
		switch(estado)//Maquina de estados Pulsador
 8000696:	e703      	b.n	80004a0 <TareaPrior+0xc>
 8000698:	20000000 	.word	0x20000000
 800069c:	40010c00 	.word	0x40010c00
 80006a0:	20000294 	.word	0x20000294
 80006a4:	20000298 	.word	0x20000298
 80006a8:	2000029c 	.word	0x2000029c
 80006ac:	200013f0 	.word	0x200013f0
 80006b0:	200013f4 	.word	0x200013f4
 80006b4:	200013f8 	.word	0x200013f8

080006b8 <xor128>:
		vTaskDelay(3000);
	}
}

/*Función que genera el numero Pseudoaleatorio*/
unsigned long xor128(void){
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
	static unsigned long x=0x5555AAAA,y=0x5555AAAA,z=0x5555AAAA,w=1513904;
	uint32_t t=(x^(x<<11));
 80006be:	4b13      	ldr	r3, [pc, #76]	; (800070c <xor128+0x54>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	02da      	lsls	r2, r3, #11
 80006c4:	4b11      	ldr	r3, [pc, #68]	; (800070c <xor128+0x54>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4053      	eors	r3, r2
 80006ca:	607b      	str	r3, [r7, #4]
	x=y;
 80006cc:	4b10      	ldr	r3, [pc, #64]	; (8000710 <xor128+0x58>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a0e      	ldr	r2, [pc, #56]	; (800070c <xor128+0x54>)
 80006d2:	6013      	str	r3, [r2, #0]
	y=z;
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <xor128+0x5c>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <xor128+0x58>)
 80006da:	6013      	str	r3, [r2, #0]
	z=w;
 80006dc:	4b0e      	ldr	r3, [pc, #56]	; (8000718 <xor128+0x60>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a0c      	ldr	r2, [pc, #48]	; (8000714 <xor128+0x5c>)
 80006e2:	6013      	str	r3, [r2, #0]

	return w=(w^(w>>19))^(t^(t>>8));
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <xor128+0x60>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	0cda      	lsrs	r2, r3, #19
 80006ea:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <xor128+0x60>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	405a      	eors	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	0a19      	lsrs	r1, r3, #8
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	404b      	eors	r3, r1
 80006f8:	4053      	eors	r3, r2
 80006fa:	4a07      	ldr	r2, [pc, #28]	; (8000718 <xor128+0x60>)
 80006fc:	6013      	str	r3, [r2, #0]
 80006fe:	4b06      	ldr	r3, [pc, #24]	; (8000718 <xor128+0x60>)
 8000700:	681b      	ldr	r3, [r3, #0]
}
 8000702:	4618      	mov	r0, r3
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	20000004 	.word	0x20000004
 8000710:	20000008 	.word	0x20000008
 8000714:	2000000c 	.word	0x2000000c
 8000718:	20000010 	.word	0x20000010

0800071c <StartDefaultTask>:

void StartDefaultTask(void const * argument)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000724:	2001      	movs	r0, #1
 8000726:	f001 fa59 	bl	8001bdc <osDelay>
 800072a:	e7fb      	b.n	8000724 <StartDefaultTask+0x8>

0800072c <HAL_TIM_PeriodElapsedCallback>:
  /* USER CODE END 5 */ 
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 
  if (htim->Instance == TIM1) {
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4a04      	ldr	r2, [pc, #16]	; (800074c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800073a:	4293      	cmp	r3, r2
 800073c:	d101      	bne.n	8000742 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800073e:	f000 f92d 	bl	800099c <HAL_IncTick>
  }
  
}
 8000742:	bf00      	nop
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40012c00 	.word	0x40012c00

08000750 <Error_Handler>:


void Error_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
 
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <HAL_MspInit+0x68>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	4a17      	ldr	r2, [pc, #92]	; (80007c4 <HAL_MspInit+0x68>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6193      	str	r3, [r2, #24]
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <HAL_MspInit+0x68>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <HAL_MspInit+0x68>)
 800077c:	69db      	ldr	r3, [r3, #28]
 800077e:	4a11      	ldr	r2, [pc, #68]	; (80007c4 <HAL_MspInit+0x68>)
 8000780:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000784:	61d3      	str	r3, [r2, #28]
 8000786:	4b0f      	ldr	r3, [pc, #60]	; (80007c4 <HAL_MspInit+0x68>)
 8000788:	69db      	ldr	r3, [r3, #28]
 800078a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000792:	2200      	movs	r2, #0
 8000794:	210f      	movs	r1, #15
 8000796:	f06f 0001 	mvn.w	r0, #1
 800079a:	f000 f9d0 	bl	8000b3e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800079e:	4b0a      	ldr	r3, [pc, #40]	; (80007c8 <HAL_MspInit+0x6c>)
 80007a0:	685b      	ldr	r3, [r3, #4]
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007aa:	60fb      	str	r3, [r7, #12]
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_MspInit+0x6c>)
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ba:	bf00      	nop
 80007bc:	3710      	adds	r7, #16
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	40021000 	.word	0x40021000
 80007c8:	40010000 	.word	0x40010000

080007cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08c      	sub	sp, #48	; 0x30
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007d8:	2300      	movs	r3, #0
 80007da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0); 
 80007dc:	2200      	movs	r2, #0
 80007de:	6879      	ldr	r1, [r7, #4]
 80007e0:	2019      	movs	r0, #25
 80007e2:	f000 f9ac 	bl	8000b3e <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn); 
 80007e6:	2019      	movs	r0, #25
 80007e8:	f000 f9c5 	bl	8000b76 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80007ec:	4b1e      	ldr	r3, [pc, #120]	; (8000868 <HAL_InitTick+0x9c>)
 80007ee:	699b      	ldr	r3, [r3, #24]
 80007f0:	4a1d      	ldr	r2, [pc, #116]	; (8000868 <HAL_InitTick+0x9c>)
 80007f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80007f6:	6193      	str	r3, [r2, #24]
 80007f8:	4b1b      	ldr	r3, [pc, #108]	; (8000868 <HAL_InitTick+0x9c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000800:	60fb      	str	r3, [r7, #12]
 8000802:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000804:	f107 0210 	add.w	r2, r7, #16
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4611      	mov	r1, r2
 800080e:	4618      	mov	r0, r3
 8000810:	f000 ff34 	bl	800167c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000814:	f000 ff1e 	bl	8001654 <HAL_RCC_GetPCLK2Freq>
 8000818:	62f8      	str	r0, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800081a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081c:	4a13      	ldr	r2, [pc, #76]	; (800086c <HAL_InitTick+0xa0>)
 800081e:	fba2 2303 	umull	r2, r3, r2, r3
 8000822:	0c9b      	lsrs	r3, r3, #18
 8000824:	3b01      	subs	r3, #1
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <HAL_InitTick+0xa4>)
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <HAL_InitTick+0xa8>)
 800082c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_InitTick+0xa4>)
 8000830:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000834:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000836:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <HAL_InitTick+0xa4>)
 8000838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800083a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <HAL_InitTick+0xa4>)
 800083e:	2200      	movs	r2, #0
 8000840:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000842:	4b0b      	ldr	r3, [pc, #44]	; (8000870 <HAL_InitTick+0xa4>)
 8000844:	2200      	movs	r2, #0
 8000846:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8000848:	4809      	ldr	r0, [pc, #36]	; (8000870 <HAL_InitTick+0xa4>)
 800084a:	f000 ff65 	bl	8001718 <HAL_TIM_Base_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d104      	bne.n	800085e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8000854:	4806      	ldr	r0, [pc, #24]	; (8000870 <HAL_InitTick+0xa4>)
 8000856:	f000 ff93 	bl	8001780 <HAL_TIM_Base_Start_IT>
 800085a:	4603      	mov	r3, r0
 800085c:	e000      	b.n	8000860 <HAL_InitTick+0x94>
  }
  
  /* Return function status */
  return HAL_ERROR;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	3730      	adds	r7, #48	; 0x30
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40021000 	.word	0x40021000
 800086c:	431bde83 	.word	0x431bde83
 8000870:	20001400 	.word	0x20001400
 8000874:	40012c00 	.word	0x40012c00

08000878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800087c:	bf00      	nop
 800087e:	46bd      	mov	sp, r7
 8000880:	bc80      	pop	{r7}
 8000882:	4770      	bx	lr

08000884 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000884:	b480      	push	{r7}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000888:	e7fe      	b.n	8000888 <HardFault_Handler+0x4>

0800088a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800088e:	e7fe      	b.n	800088e <MemManage_Handler+0x4>

08000890 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000894:	e7fe      	b.n	8000894 <BusFault_Handler+0x4>

08000896 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000896:	b480      	push	{r7}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800089a:	e7fe      	b.n	800089a <UsageFault_Handler+0x4>

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr

080008a8 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <TIM1_UP_IRQHandler+0x10>)
 80008ae:	f000 ff8a 	bl	80017c6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	20001400 	.word	0x20001400

080008bc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <SystemInit+0x5c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a14      	ldr	r2, [pc, #80]	; (8000918 <SystemInit+0x5c>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <SystemInit+0x5c>)
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	4911      	ldr	r1, [pc, #68]	; (8000918 <SystemInit+0x5c>)
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <SystemInit+0x60>)
 80008d4:	4013      	ands	r3, r2
 80008d6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <SystemInit+0x5c>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a0e      	ldr	r2, [pc, #56]	; (8000918 <SystemInit+0x5c>)
 80008de:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80008e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008e6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <SystemInit+0x5c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <SystemInit+0x5c>)
 80008ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008f2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80008f4:	4b08      	ldr	r3, [pc, #32]	; (8000918 <SystemInit+0x5c>)
 80008f6:	685b      	ldr	r3, [r3, #4]
 80008f8:	4a07      	ldr	r2, [pc, #28]	; (8000918 <SystemInit+0x5c>)
 80008fa:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80008fe:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000900:	4b05      	ldr	r3, [pc, #20]	; (8000918 <SystemInit+0x5c>)
 8000902:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000906:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <SystemInit+0x64>)
 800090a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800090e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	bc80      	pop	{r7}
 8000916:	4770      	bx	lr
 8000918:	40021000 	.word	0x40021000
 800091c:	f8ff0000 	.word	0xf8ff0000
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000924:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000926:	e003      	b.n	8000930 <LoopCopyDataInit>

08000928 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000928:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800092a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800092c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800092e:	3104      	adds	r1, #4

08000930 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000930:	480a      	ldr	r0, [pc, #40]	; (800095c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000934:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000936:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000938:	d3f6      	bcc.n	8000928 <CopyDataInit>
  ldr r2, =_sbss
 800093a:	4a0a      	ldr	r2, [pc, #40]	; (8000964 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800093c:	e002      	b.n	8000944 <LoopFillZerobss>

0800093e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800093e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000940:	f842 3b04 	str.w	r3, [r2], #4

08000944 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000944:	4b08      	ldr	r3, [pc, #32]	; (8000968 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000946:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000948:	d3f9      	bcc.n	800093e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800094a:	f7ff ffb7 	bl	80008bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800094e:	f002 fb51 	bl	8002ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000952:	f7ff fc15 	bl	8000180 <main>
  bx lr
 8000956:	4770      	bx	lr
  ldr r3, =_sidata
 8000958:	080030f8 	.word	0x080030f8
  ldr r0, =_sdata
 800095c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000960:	20000024 	.word	0x20000024
  ldr r2, =_sbss
 8000964:	20000024 	.word	0x20000024
  ldr r3, = _ebss
 8000968:	20001444 	.word	0x20001444

0800096c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800096c:	e7fe      	b.n	800096c <ADC1_2_IRQHandler>
	...

08000970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <HAL_Init+0x28>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a07      	ldr	r2, [pc, #28]	; (8000998 <HAL_Init+0x28>)
 800097a:	f043 0310 	orr.w	r3, r3, #16
 800097e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000980:	2003      	movs	r0, #3
 8000982:	f000 f8d1 	bl	8000b28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000986:	2000      	movs	r0, #0
 8000988:	f7ff ff20 	bl	80007cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800098c:	f7ff fee6 	bl	800075c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000990:	2300      	movs	r3, #0
}
 8000992:	4618      	mov	r0, r3
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40022000 	.word	0x40022000

0800099c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009a0:	4b05      	ldr	r3, [pc, #20]	; (80009b8 <HAL_IncTick+0x1c>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b05      	ldr	r3, [pc, #20]	; (80009bc <HAL_IncTick+0x20>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a03      	ldr	r2, [pc, #12]	; (80009bc <HAL_IncTick+0x20>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	2000001c 	.word	0x2000001c
 80009bc:	20001440 	.word	0x20001440

080009c0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return uwTick;
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <HAL_GetTick+0x10>)
 80009c6:	681b      	ldr	r3, [r3, #0]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	20001440 	.word	0x20001440

080009d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b085      	sub	sp, #20
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	f003 0307 	and.w	r3, r3, #7
 80009e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009e4:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ea:	68ba      	ldr	r2, [r7, #8]
 80009ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f0:	4013      	ands	r3, r2
 80009f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a06:	4a04      	ldr	r2, [pc, #16]	; (8000a18 <__NVIC_SetPriorityGrouping+0x44>)
 8000a08:	68bb      	ldr	r3, [r7, #8]
 8000a0a:	60d3      	str	r3, [r2, #12]
}
 8000a0c:	bf00      	nop
 8000a0e:	3714      	adds	r7, #20
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a20:	4b04      	ldr	r3, [pc, #16]	; (8000a34 <__NVIC_GetPriorityGrouping+0x18>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	0a1b      	lsrs	r3, r3, #8
 8000a26:	f003 0307 	and.w	r3, r3, #7
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bc80      	pop	{r7}
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b083      	sub	sp, #12
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4603      	mov	r3, r0
 8000a40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	db0b      	blt.n	8000a62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	f003 021f 	and.w	r2, r3, #31
 8000a50:	4906      	ldr	r1, [pc, #24]	; (8000a6c <__NVIC_EnableIRQ+0x34>)
 8000a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a56:	095b      	lsrs	r3, r3, #5
 8000a58:	2001      	movs	r0, #1
 8000a5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000a5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	e000e100 	.word	0xe000e100

08000a70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	4603      	mov	r3, r0
 8000a78:	6039      	str	r1, [r7, #0]
 8000a7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	db0a      	blt.n	8000a9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	490c      	ldr	r1, [pc, #48]	; (8000abc <__NVIC_SetPriority+0x4c>)
 8000a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8e:	0112      	lsls	r2, r2, #4
 8000a90:	b2d2      	uxtb	r2, r2
 8000a92:	440b      	add	r3, r1
 8000a94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a98:	e00a      	b.n	8000ab0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	b2da      	uxtb	r2, r3
 8000a9e:	4908      	ldr	r1, [pc, #32]	; (8000ac0 <__NVIC_SetPriority+0x50>)
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	f003 030f 	and.w	r3, r3, #15
 8000aa6:	3b04      	subs	r3, #4
 8000aa8:	0112      	lsls	r2, r2, #4
 8000aaa:	b2d2      	uxtb	r2, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	761a      	strb	r2, [r3, #24]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	e000e100 	.word	0xe000e100
 8000ac0:	e000ed00 	.word	0xe000ed00

08000ac4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b089      	sub	sp, #36	; 0x24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f003 0307 	and.w	r3, r3, #7
 8000ad6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad8:	69fb      	ldr	r3, [r7, #28]
 8000ada:	f1c3 0307 	rsb	r3, r3, #7
 8000ade:	2b04      	cmp	r3, #4
 8000ae0:	bf28      	it	cs
 8000ae2:	2304      	movcs	r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	2b06      	cmp	r3, #6
 8000aec:	d902      	bls.n	8000af4 <NVIC_EncodePriority+0x30>
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	3b03      	subs	r3, #3
 8000af2:	e000      	b.n	8000af6 <NVIC_EncodePriority+0x32>
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af8:	f04f 32ff 	mov.w	r2, #4294967295
 8000afc:	69bb      	ldr	r3, [r7, #24]
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	401a      	ands	r2, r3
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b0c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	fa01 f303 	lsl.w	r3, r1, r3
 8000b16:	43d9      	mvns	r1, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b1c:	4313      	orrs	r3, r2
         );
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3724      	adds	r7, #36	; 0x24
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr

08000b28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b30:	6878      	ldr	r0, [r7, #4]
 8000b32:	f7ff ff4f 	bl	80009d4 <__NVIC_SetPriorityGrouping>
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}

08000b3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b3e:	b580      	push	{r7, lr}
 8000b40:	b086      	sub	sp, #24
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	4603      	mov	r3, r0
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
 8000b4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b50:	f7ff ff64 	bl	8000a1c <__NVIC_GetPriorityGrouping>
 8000b54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	68b9      	ldr	r1, [r7, #8]
 8000b5a:	6978      	ldr	r0, [r7, #20]
 8000b5c:	f7ff ffb2 	bl	8000ac4 <NVIC_EncodePriority>
 8000b60:	4602      	mov	r2, r0
 8000b62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b66:	4611      	mov	r1, r2
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff81 	bl	8000a70 <__NVIC_SetPriority>
}
 8000b6e:	bf00      	nop
 8000b70:	3718      	adds	r7, #24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f7ff ff57 	bl	8000a38 <__NVIC_EnableIRQ>
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
	...

08000b94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b08b      	sub	sp, #44	; 0x2c
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ba6:	e127      	b.n	8000df8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000ba8:	2201      	movs	r2, #1
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	69fa      	ldr	r2, [r7, #28]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000bbc:	69ba      	ldr	r2, [r7, #24]
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	f040 8116 	bne.w	8000df2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	2b12      	cmp	r3, #18
 8000bcc:	d034      	beq.n	8000c38 <HAL_GPIO_Init+0xa4>
 8000bce:	2b12      	cmp	r3, #18
 8000bd0:	d80d      	bhi.n	8000bee <HAL_GPIO_Init+0x5a>
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d02b      	beq.n	8000c2e <HAL_GPIO_Init+0x9a>
 8000bd6:	2b02      	cmp	r3, #2
 8000bd8:	d804      	bhi.n	8000be4 <HAL_GPIO_Init+0x50>
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d031      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
 8000bde:	2b01      	cmp	r3, #1
 8000be0:	d01c      	beq.n	8000c1c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000be2:	e048      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	d043      	beq.n	8000c70 <HAL_GPIO_Init+0xdc>
 8000be8:	2b11      	cmp	r3, #17
 8000bea:	d01b      	beq.n	8000c24 <HAL_GPIO_Init+0x90>
          break;
 8000bec:	e043      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000bee:	4a89      	ldr	r2, [pc, #548]	; (8000e14 <HAL_GPIO_Init+0x280>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d026      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
 8000bf4:	4a87      	ldr	r2, [pc, #540]	; (8000e14 <HAL_GPIO_Init+0x280>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d806      	bhi.n	8000c08 <HAL_GPIO_Init+0x74>
 8000bfa:	4a87      	ldr	r2, [pc, #540]	; (8000e18 <HAL_GPIO_Init+0x284>)
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d020      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
 8000c00:	4a86      	ldr	r2, [pc, #536]	; (8000e1c <HAL_GPIO_Init+0x288>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d01d      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
          break;
 8000c06:	e036      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8000c08:	4a85      	ldr	r2, [pc, #532]	; (8000e20 <HAL_GPIO_Init+0x28c>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d019      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
 8000c0e:	4a85      	ldr	r2, [pc, #532]	; (8000e24 <HAL_GPIO_Init+0x290>)
 8000c10:	4293      	cmp	r3, r2
 8000c12:	d016      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
 8000c14:	4a84      	ldr	r2, [pc, #528]	; (8000e28 <HAL_GPIO_Init+0x294>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d013      	beq.n	8000c42 <HAL_GPIO_Init+0xae>
          break;
 8000c1a:	e02c      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	623b      	str	r3, [r7, #32]
          break;
 8000c22:	e028      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	3304      	adds	r3, #4
 8000c2a:	623b      	str	r3, [r7, #32]
          break;
 8000c2c:	e023      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	68db      	ldr	r3, [r3, #12]
 8000c32:	3308      	adds	r3, #8
 8000c34:	623b      	str	r3, [r7, #32]
          break;
 8000c36:	e01e      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	330c      	adds	r3, #12
 8000c3e:	623b      	str	r3, [r7, #32]
          break;
 8000c40:	e019      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	689b      	ldr	r3, [r3, #8]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d102      	bne.n	8000c50 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000c4a:	2304      	movs	r3, #4
 8000c4c:	623b      	str	r3, [r7, #32]
          break;
 8000c4e:	e012      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	689b      	ldr	r3, [r3, #8]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d105      	bne.n	8000c64 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c58:	2308      	movs	r3, #8
 8000c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	69fa      	ldr	r2, [r7, #28]
 8000c60:	611a      	str	r2, [r3, #16]
          break;
 8000c62:	e008      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000c64:	2308      	movs	r3, #8
 8000c66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	69fa      	ldr	r2, [r7, #28]
 8000c6c:	615a      	str	r2, [r3, #20]
          break;
 8000c6e:	e002      	b.n	8000c76 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
          break;
 8000c74:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c76:	69bb      	ldr	r3, [r7, #24]
 8000c78:	2bff      	cmp	r3, #255	; 0xff
 8000c7a:	d801      	bhi.n	8000c80 <HAL_GPIO_Init+0xec>
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	e001      	b.n	8000c84 <HAL_GPIO_Init+0xf0>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3304      	adds	r3, #4
 8000c84:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	2bff      	cmp	r3, #255	; 0xff
 8000c8a:	d802      	bhi.n	8000c92 <HAL_GPIO_Init+0xfe>
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	e002      	b.n	8000c98 <HAL_GPIO_Init+0x104>
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	3b08      	subs	r3, #8
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	210f      	movs	r1, #15
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	401a      	ands	r2, r3
 8000caa:	6a39      	ldr	r1, [r7, #32]
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f000 8096 	beq.w	8000df2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc6:	4b59      	ldr	r3, [pc, #356]	; (8000e2c <HAL_GPIO_Init+0x298>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	4a58      	ldr	r2, [pc, #352]	; (8000e2c <HAL_GPIO_Init+0x298>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	6193      	str	r3, [r2, #24]
 8000cd2:	4b56      	ldr	r3, [pc, #344]	; (8000e2c <HAL_GPIO_Init+0x298>)
 8000cd4:	699b      	ldr	r3, [r3, #24]
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000cde:	4a54      	ldr	r2, [pc, #336]	; (8000e30 <HAL_GPIO_Init+0x29c>)
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	089b      	lsrs	r3, r3, #2
 8000ce4:	3302      	adds	r3, #2
 8000ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cea:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	009b      	lsls	r3, r3, #2
 8000cf4:	220f      	movs	r2, #15
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43db      	mvns	r3, r3
 8000cfc:	68fa      	ldr	r2, [r7, #12]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4b      	ldr	r2, [pc, #300]	; (8000e34 <HAL_GPIO_Init+0x2a0>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d013      	beq.n	8000d32 <HAL_GPIO_Init+0x19e>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4a      	ldr	r2, [pc, #296]	; (8000e38 <HAL_GPIO_Init+0x2a4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d00d      	beq.n	8000d2e <HAL_GPIO_Init+0x19a>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a49      	ldr	r2, [pc, #292]	; (8000e3c <HAL_GPIO_Init+0x2a8>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d007      	beq.n	8000d2a <HAL_GPIO_Init+0x196>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a48      	ldr	r2, [pc, #288]	; (8000e40 <HAL_GPIO_Init+0x2ac>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_GPIO_Init+0x192>
 8000d22:	2303      	movs	r3, #3
 8000d24:	e006      	b.n	8000d34 <HAL_GPIO_Init+0x1a0>
 8000d26:	2304      	movs	r3, #4
 8000d28:	e004      	b.n	8000d34 <HAL_GPIO_Init+0x1a0>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e002      	b.n	8000d34 <HAL_GPIO_Init+0x1a0>
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e000      	b.n	8000d34 <HAL_GPIO_Init+0x1a0>
 8000d32:	2300      	movs	r3, #0
 8000d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d36:	f002 0203 	and.w	r2, r2, #3
 8000d3a:	0092      	lsls	r2, r2, #2
 8000d3c:	4093      	lsls	r3, r2
 8000d3e:	68fa      	ldr	r2, [r7, #12]
 8000d40:	4313      	orrs	r3, r2
 8000d42:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000d44:	493a      	ldr	r1, [pc, #232]	; (8000e30 <HAL_GPIO_Init+0x29c>)
 8000d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d48:	089b      	lsrs	r3, r3, #2
 8000d4a:	3302      	adds	r3, #2
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d006      	beq.n	8000d6c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d5e:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	4938      	ldr	r1, [pc, #224]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	4313      	orrs	r3, r2
 8000d68:	600b      	str	r3, [r1, #0]
 8000d6a:	e006      	b.n	8000d7a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d6c:	4b35      	ldr	r3, [pc, #212]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	69bb      	ldr	r3, [r7, #24]
 8000d72:	43db      	mvns	r3, r3
 8000d74:	4933      	ldr	r1, [pc, #204]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d76:	4013      	ands	r3, r2
 8000d78:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d006      	beq.n	8000d94 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d86:	4b2f      	ldr	r3, [pc, #188]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d88:	685a      	ldr	r2, [r3, #4]
 8000d8a:	492e      	ldr	r1, [pc, #184]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	604b      	str	r3, [r1, #4]
 8000d92:	e006      	b.n	8000da2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d94:	4b2b      	ldr	r3, [pc, #172]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d96:	685a      	ldr	r2, [r3, #4]
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	43db      	mvns	r3, r3
 8000d9c:	4929      	ldr	r1, [pc, #164]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d006      	beq.n	8000dbc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000dae:	4b25      	ldr	r3, [pc, #148]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	4924      	ldr	r1, [pc, #144]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000db4:	69bb      	ldr	r3, [r7, #24]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	608b      	str	r3, [r1, #8]
 8000dba:	e006      	b.n	8000dca <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000dbc:	4b21      	ldr	r3, [pc, #132]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000dbe:	689a      	ldr	r2, [r3, #8]
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	43db      	mvns	r3, r3
 8000dc4:	491f      	ldr	r1, [pc, #124]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d006      	beq.n	8000de4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000dd8:	68da      	ldr	r2, [r3, #12]
 8000dda:	491a      	ldr	r1, [pc, #104]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000ddc:	69bb      	ldr	r3, [r7, #24]
 8000dde:	4313      	orrs	r3, r2
 8000de0:	60cb      	str	r3, [r1, #12]
 8000de2:	e006      	b.n	8000df2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000de4:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	43db      	mvns	r3, r3
 8000dec:	4915      	ldr	r1, [pc, #84]	; (8000e44 <HAL_GPIO_Init+0x2b0>)
 8000dee:	4013      	ands	r3, r2
 8000df0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000df4:	3301      	adds	r3, #1
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f47f aed0 	bne.w	8000ba8 <HAL_GPIO_Init+0x14>
  }
}
 8000e08:	bf00      	nop
 8000e0a:	372c      	adds	r7, #44	; 0x2c
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	10210000 	.word	0x10210000
 8000e18:	10110000 	.word	0x10110000
 8000e1c:	10120000 	.word	0x10120000
 8000e20:	10310000 	.word	0x10310000
 8000e24:	10320000 	.word	0x10320000
 8000e28:	10220000 	.word	0x10220000
 8000e2c:	40021000 	.word	0x40021000
 8000e30:	40010000 	.word	0x40010000
 8000e34:	40010800 	.word	0x40010800
 8000e38:	40010c00 	.word	0x40010c00
 8000e3c:	40011000 	.word	0x40011000
 8000e40:	40011400 	.word	0x40011400
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	887b      	ldrh	r3, [r7, #2]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d002      	beq.n	8000e66 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000e60:	2301      	movs	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	e001      	b.n	8000e6a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000e66:	2300      	movs	r3, #0
 8000e68:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3714      	adds	r7, #20
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bc80      	pop	{r7}
 8000e74:	4770      	bx	lr

08000e76 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e76:	b480      	push	{r7}
 8000e78:	b083      	sub	sp, #12
 8000e7a:	af00      	add	r7, sp, #0
 8000e7c:	6078      	str	r0, [r7, #4]
 8000e7e:	460b      	mov	r3, r1
 8000e80:	807b      	strh	r3, [r7, #2]
 8000e82:	4613      	mov	r3, r2
 8000e84:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e86:	787b      	ldrb	r3, [r7, #1]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d003      	beq.n	8000e94 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e8c:	887a      	ldrh	r2, [r7, #2]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e92:	e003      	b.n	8000e9c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e94:	887b      	ldrh	r3, [r7, #2]
 8000e96:	041a      	lsls	r2, r3, #16
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	611a      	str	r2, [r3, #16]
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bc80      	pop	{r7}
 8000ea4:	4770      	bx	lr
	...

08000ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b086      	sub	sp, #24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d101      	bne.n	8000eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e26c      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	f000 8087 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ec8:	4b92      	ldr	r3, [pc, #584]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 030c 	and.w	r3, r3, #12
 8000ed0:	2b04      	cmp	r3, #4
 8000ed2:	d00c      	beq.n	8000eee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ed4:	4b8f      	ldr	r3, [pc, #572]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 030c 	and.w	r3, r3, #12
 8000edc:	2b08      	cmp	r3, #8
 8000ede:	d112      	bne.n	8000f06 <HAL_RCC_OscConfig+0x5e>
 8000ee0:	4b8c      	ldr	r3, [pc, #560]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eec:	d10b      	bne.n	8000f06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eee:	4b89      	ldr	r3, [pc, #548]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d06c      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x12c>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d168      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000f02:	2301      	movs	r3, #1
 8000f04:	e246      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0e:	d106      	bne.n	8000f1e <HAL_RCC_OscConfig+0x76>
 8000f10:	4b80      	ldr	r3, [pc, #512]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a7f      	ldr	r2, [pc, #508]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1a:	6013      	str	r3, [r2, #0]
 8000f1c:	e02e      	b.n	8000f7c <HAL_RCC_OscConfig+0xd4>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d10c      	bne.n	8000f40 <HAL_RCC_OscConfig+0x98>
 8000f26:	4b7b      	ldr	r3, [pc, #492]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a7a      	ldr	r2, [pc, #488]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	4b78      	ldr	r3, [pc, #480]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	4a77      	ldr	r2, [pc, #476]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e01d      	b.n	8000f7c <HAL_RCC_OscConfig+0xd4>
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f48:	d10c      	bne.n	8000f64 <HAL_RCC_OscConfig+0xbc>
 8000f4a:	4b72      	ldr	r3, [pc, #456]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a71      	ldr	r2, [pc, #452]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f54:	6013      	str	r3, [r2, #0]
 8000f56:	4b6f      	ldr	r3, [pc, #444]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a6e      	ldr	r2, [pc, #440]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6013      	str	r3, [r2, #0]
 8000f62:	e00b      	b.n	8000f7c <HAL_RCC_OscConfig+0xd4>
 8000f64:	4b6b      	ldr	r3, [pc, #428]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a6a      	ldr	r2, [pc, #424]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f6e:	6013      	str	r3, [r2, #0]
 8000f70:	4b68      	ldr	r3, [pc, #416]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a67      	ldr	r2, [pc, #412]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d013      	beq.n	8000fac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f84:	f7ff fd1c 	bl	80009c0 <HAL_GetTick>
 8000f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8a:	e008      	b.n	8000f9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f8c:	f7ff fd18 	bl	80009c0 <HAL_GetTick>
 8000f90:	4602      	mov	r2, r0
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	2b64      	cmp	r3, #100	; 0x64
 8000f98:	d901      	bls.n	8000f9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e1fa      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9e:	4b5d      	ldr	r3, [pc, #372]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d0f0      	beq.n	8000f8c <HAL_RCC_OscConfig+0xe4>
 8000faa:	e014      	b.n	8000fd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fac:	f7ff fd08 	bl	80009c0 <HAL_GetTick>
 8000fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb2:	e008      	b.n	8000fc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fb4:	f7ff fd04 	bl	80009c0 <HAL_GetTick>
 8000fb8:	4602      	mov	r2, r0
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b64      	cmp	r3, #100	; 0x64
 8000fc0:	d901      	bls.n	8000fc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e1e6      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc6:	4b53      	ldr	r3, [pc, #332]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d1f0      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x10c>
 8000fd2:	e000      	b.n	8000fd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 0302 	and.w	r3, r3, #2
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d063      	beq.n	80010aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fe2:	4b4c      	ldr	r3, [pc, #304]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 030c 	and.w	r3, r3, #12
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000fee:	4b49      	ldr	r3, [pc, #292]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f003 030c 	and.w	r3, r3, #12
 8000ff6:	2b08      	cmp	r3, #8
 8000ff8:	d11c      	bne.n	8001034 <HAL_RCC_OscConfig+0x18c>
 8000ffa:	4b46      	ldr	r3, [pc, #280]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8000ffc:	685b      	ldr	r3, [r3, #4]
 8000ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001002:	2b00      	cmp	r3, #0
 8001004:	d116      	bne.n	8001034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001006:	4b43      	ldr	r3, [pc, #268]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d005      	beq.n	800101e <HAL_RCC_OscConfig+0x176>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d001      	beq.n	800101e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e1ba      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101e:	4b3d      	ldr	r3, [pc, #244]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	4939      	ldr	r1, [pc, #228]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 800102e:	4313      	orrs	r3, r2
 8001030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001032:	e03a      	b.n	80010aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	691b      	ldr	r3, [r3, #16]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d020      	beq.n	800107e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800103c:	4b36      	ldr	r3, [pc, #216]	; (8001118 <HAL_RCC_OscConfig+0x270>)
 800103e:	2201      	movs	r2, #1
 8001040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001042:	f7ff fcbd 	bl	80009c0 <HAL_GetTick>
 8001046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001048:	e008      	b.n	800105c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800104a:	f7ff fcb9 	bl	80009c0 <HAL_GetTick>
 800104e:	4602      	mov	r2, r0
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	2b02      	cmp	r3, #2
 8001056:	d901      	bls.n	800105c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e19b      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800105c:	4b2d      	ldr	r3, [pc, #180]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	f003 0302 	and.w	r3, r3, #2
 8001064:	2b00      	cmp	r3, #0
 8001066:	d0f0      	beq.n	800104a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001068:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	695b      	ldr	r3, [r3, #20]
 8001074:	00db      	lsls	r3, r3, #3
 8001076:	4927      	ldr	r1, [pc, #156]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 8001078:	4313      	orrs	r3, r2
 800107a:	600b      	str	r3, [r1, #0]
 800107c:	e015      	b.n	80010aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800107e:	4b26      	ldr	r3, [pc, #152]	; (8001118 <HAL_RCC_OscConfig+0x270>)
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001084:	f7ff fc9c 	bl	80009c0 <HAL_GetTick>
 8001088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800108a:	e008      	b.n	800109e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800108c:	f7ff fc98 	bl	80009c0 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e17a      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109e:	4b1d      	ldr	r3, [pc, #116]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1f0      	bne.n	800108c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d03a      	beq.n	800112c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	699b      	ldr	r3, [r3, #24]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d019      	beq.n	80010f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <HAL_RCC_OscConfig+0x274>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010c4:	f7ff fc7c 	bl	80009c0 <HAL_GetTick>
 80010c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ca:	e008      	b.n	80010de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010cc:	f7ff fc78 	bl	80009c0 <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d901      	bls.n	80010de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80010da:	2303      	movs	r3, #3
 80010dc:	e15a      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010de:	4b0d      	ldr	r3, [pc, #52]	; (8001114 <HAL_RCC_OscConfig+0x26c>)
 80010e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010e2:	f003 0302 	and.w	r3, r3, #2
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d0f0      	beq.n	80010cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 faf6 	bl	80016dc <RCC_Delay>
 80010f0:	e01c      	b.n	800112c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010f2:	4b0a      	ldr	r3, [pc, #40]	; (800111c <HAL_RCC_OscConfig+0x274>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f8:	f7ff fc62 	bl	80009c0 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010fe:	e00f      	b.n	8001120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001100:	f7ff fc5e 	bl	80009c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d908      	bls.n	8001120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e140      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
 8001112:	bf00      	nop
 8001114:	40021000 	.word	0x40021000
 8001118:	42420000 	.word	0x42420000
 800111c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001120:	4b9e      	ldr	r3, [pc, #632]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1e9      	bne.n	8001100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0304 	and.w	r3, r3, #4
 8001134:	2b00      	cmp	r3, #0
 8001136:	f000 80a6 	beq.w	8001286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800113a:	2300      	movs	r3, #0
 800113c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113e:	4b97      	ldr	r3, [pc, #604]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001140:	69db      	ldr	r3, [r3, #28]
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d10d      	bne.n	8001166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b94      	ldr	r3, [pc, #592]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 800114c:	69db      	ldr	r3, [r3, #28]
 800114e:	4a93      	ldr	r2, [pc, #588]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	61d3      	str	r3, [r2, #28]
 8001156:	4b91      	ldr	r3, [pc, #580]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001162:	2301      	movs	r3, #1
 8001164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001166:	4b8e      	ldr	r3, [pc, #568]	; (80013a0 <HAL_RCC_OscConfig+0x4f8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	2b00      	cmp	r3, #0
 8001170:	d118      	bne.n	80011a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001172:	4b8b      	ldr	r3, [pc, #556]	; (80013a0 <HAL_RCC_OscConfig+0x4f8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a8a      	ldr	r2, [pc, #552]	; (80013a0 <HAL_RCC_OscConfig+0x4f8>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117e:	f7ff fc1f 	bl	80009c0 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001184:	e008      	b.n	8001198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001186:	f7ff fc1b 	bl	80009c0 <HAL_GetTick>
 800118a:	4602      	mov	r2, r0
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	1ad3      	subs	r3, r2, r3
 8001190:	2b64      	cmp	r3, #100	; 0x64
 8001192:	d901      	bls.n	8001198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001194:	2303      	movs	r3, #3
 8001196:	e0fd      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	4b81      	ldr	r3, [pc, #516]	; (80013a0 <HAL_RCC_OscConfig+0x4f8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0f0      	beq.n	8001186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d106      	bne.n	80011ba <HAL_RCC_OscConfig+0x312>
 80011ac:	4b7b      	ldr	r3, [pc, #492]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011ae:	6a1b      	ldr	r3, [r3, #32]
 80011b0:	4a7a      	ldr	r2, [pc, #488]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011b2:	f043 0301 	orr.w	r3, r3, #1
 80011b6:	6213      	str	r3, [r2, #32]
 80011b8:	e02d      	b.n	8001216 <HAL_RCC_OscConfig+0x36e>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10c      	bne.n	80011dc <HAL_RCC_OscConfig+0x334>
 80011c2:	4b76      	ldr	r3, [pc, #472]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011c4:	6a1b      	ldr	r3, [r3, #32]
 80011c6:	4a75      	ldr	r2, [pc, #468]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011c8:	f023 0301 	bic.w	r3, r3, #1
 80011cc:	6213      	str	r3, [r2, #32]
 80011ce:	4b73      	ldr	r3, [pc, #460]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011d0:	6a1b      	ldr	r3, [r3, #32]
 80011d2:	4a72      	ldr	r2, [pc, #456]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011d4:	f023 0304 	bic.w	r3, r3, #4
 80011d8:	6213      	str	r3, [r2, #32]
 80011da:	e01c      	b.n	8001216 <HAL_RCC_OscConfig+0x36e>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	2b05      	cmp	r3, #5
 80011e2:	d10c      	bne.n	80011fe <HAL_RCC_OscConfig+0x356>
 80011e4:	4b6d      	ldr	r3, [pc, #436]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011e6:	6a1b      	ldr	r3, [r3, #32]
 80011e8:	4a6c      	ldr	r2, [pc, #432]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011ea:	f043 0304 	orr.w	r3, r3, #4
 80011ee:	6213      	str	r3, [r2, #32]
 80011f0:	4b6a      	ldr	r3, [pc, #424]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011f2:	6a1b      	ldr	r3, [r3, #32]
 80011f4:	4a69      	ldr	r2, [pc, #420]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	6213      	str	r3, [r2, #32]
 80011fc:	e00b      	b.n	8001216 <HAL_RCC_OscConfig+0x36e>
 80011fe:	4b67      	ldr	r3, [pc, #412]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4a66      	ldr	r2, [pc, #408]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001204:	f023 0301 	bic.w	r3, r3, #1
 8001208:	6213      	str	r3, [r2, #32]
 800120a:	4b64      	ldr	r3, [pc, #400]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	4a63      	ldr	r2, [pc, #396]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001210:	f023 0304 	bic.w	r3, r3, #4
 8001214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d015      	beq.n	800124a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800121e:	f7ff fbcf 	bl	80009c0 <HAL_GetTick>
 8001222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001224:	e00a      	b.n	800123c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7ff fbcb 	bl	80009c0 <HAL_GetTick>
 800122a:	4602      	mov	r2, r0
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	f241 3288 	movw	r2, #5000	; 0x1388
 8001234:	4293      	cmp	r3, r2
 8001236:	d901      	bls.n	800123c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001238:	2303      	movs	r3, #3
 800123a:	e0ab      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123c:	4b57      	ldr	r3, [pc, #348]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 800123e:	6a1b      	ldr	r3, [r3, #32]
 8001240:	f003 0302 	and.w	r3, r3, #2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d0ee      	beq.n	8001226 <HAL_RCC_OscConfig+0x37e>
 8001248:	e014      	b.n	8001274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800124a:	f7ff fbb9 	bl	80009c0 <HAL_GetTick>
 800124e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001250:	e00a      	b.n	8001268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001252:	f7ff fbb5 	bl	80009c0 <HAL_GetTick>
 8001256:	4602      	mov	r2, r0
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	1ad3      	subs	r3, r2, r3
 800125c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001260:	4293      	cmp	r3, r2
 8001262:	d901      	bls.n	8001268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001264:	2303      	movs	r3, #3
 8001266:	e095      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001268:	4b4c      	ldr	r3, [pc, #304]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	f003 0302 	and.w	r3, r3, #2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d1ee      	bne.n	8001252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001274:	7dfb      	ldrb	r3, [r7, #23]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d105      	bne.n	8001286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800127a:	4b48      	ldr	r3, [pc, #288]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4a47      	ldr	r2, [pc, #284]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69db      	ldr	r3, [r3, #28]
 800128a:	2b00      	cmp	r3, #0
 800128c:	f000 8081 	beq.w	8001392 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001290:	4b42      	ldr	r3, [pc, #264]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 030c 	and.w	r3, r3, #12
 8001298:	2b08      	cmp	r3, #8
 800129a:	d061      	beq.n	8001360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	69db      	ldr	r3, [r3, #28]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d146      	bne.n	8001332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a4:	4b3f      	ldr	r3, [pc, #252]	; (80013a4 <HAL_RCC_OscConfig+0x4fc>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012aa:	f7ff fb89 	bl	80009c0 <HAL_GetTick>
 80012ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012b0:	e008      	b.n	80012c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80012b2:	f7ff fb85 	bl	80009c0 <HAL_GetTick>
 80012b6:	4602      	mov	r2, r0
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	1ad3      	subs	r3, r2, r3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d901      	bls.n	80012c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80012c0:	2303      	movs	r3, #3
 80012c2:	e067      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c4:	4b35      	ldr	r3, [pc, #212]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1f0      	bne.n	80012b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6a1b      	ldr	r3, [r3, #32]
 80012d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d8:	d108      	bne.n	80012ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80012da:	4b30      	ldr	r3, [pc, #192]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	492d      	ldr	r1, [pc, #180]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012ec:	4b2b      	ldr	r3, [pc, #172]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6a19      	ldr	r1, [r3, #32]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012fc:	430b      	orrs	r3, r1
 80012fe:	4927      	ldr	r1, [pc, #156]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001300:	4313      	orrs	r3, r2
 8001302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <HAL_RCC_OscConfig+0x4fc>)
 8001306:	2201      	movs	r2, #1
 8001308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800130a:	f7ff fb59 	bl	80009c0 <HAL_GetTick>
 800130e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001310:	e008      	b.n	8001324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001312:	f7ff fb55 	bl	80009c0 <HAL_GetTick>
 8001316:	4602      	mov	r2, r0
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d901      	bls.n	8001324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	e037      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f0      	beq.n	8001312 <HAL_RCC_OscConfig+0x46a>
 8001330:	e02f      	b.n	8001392 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001332:	4b1c      	ldr	r3, [pc, #112]	; (80013a4 <HAL_RCC_OscConfig+0x4fc>)
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001338:	f7ff fb42 	bl	80009c0 <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001340:	f7ff fb3e 	bl	80009c0 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e020      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001352:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d1f0      	bne.n	8001340 <HAL_RCC_OscConfig+0x498>
 800135e:	e018      	b.n	8001392 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	69db      	ldr	r3, [r3, #28]
 8001364:	2b01      	cmp	r3, #1
 8001366:	d101      	bne.n	800136c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e013      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800136c:	4b0b      	ldr	r3, [pc, #44]	; (800139c <HAL_RCC_OscConfig+0x4f4>)
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	429a      	cmp	r2, r3
 800137e:	d106      	bne.n	800138e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800138a:	429a      	cmp	r2, r3
 800138c:	d001      	beq.n	8001392 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e000      	b.n	8001394 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	40007000 	.word	0x40007000
 80013a4:	42420060 	.word	0x42420060

080013a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d101      	bne.n	80013bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	e0d0      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80013bc:	4b6a      	ldr	r3, [pc, #424]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0307 	and.w	r3, r3, #7
 80013c4:	683a      	ldr	r2, [r7, #0]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d910      	bls.n	80013ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ca:	4b67      	ldr	r3, [pc, #412]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f023 0207 	bic.w	r2, r3, #7
 80013d2:	4965      	ldr	r1, [pc, #404]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013da:	4b63      	ldr	r3, [pc, #396]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	683a      	ldr	r2, [r7, #0]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	d001      	beq.n	80013ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e0b8      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 0302 	and.w	r3, r3, #2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d005      	beq.n	8001410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001404:	4b59      	ldr	r3, [pc, #356]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	4a58      	ldr	r2, [pc, #352]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800140a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800140e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 0308 	and.w	r3, r3, #8
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800141c:	4b53      	ldr	r3, [pc, #332]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a52      	ldr	r2, [pc, #328]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001428:	4b50      	ldr	r3, [pc, #320]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	494d      	ldr	r1, [pc, #308]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001436:	4313      	orrs	r3, r2
 8001438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	2b00      	cmp	r3, #0
 8001444:	d040      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	2b01      	cmp	r3, #1
 800144c:	d107      	bne.n	800145e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800144e:	4b47      	ldr	r3, [pc, #284]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d115      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e07f      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b02      	cmp	r3, #2
 8001464:	d107      	bne.n	8001476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800146e:	2b00      	cmp	r3, #0
 8001470:	d109      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	e073      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001476:	4b3d      	ldr	r3, [pc, #244]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d101      	bne.n	8001486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e06b      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001486:	4b39      	ldr	r3, [pc, #228]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f023 0203 	bic.w	r2, r3, #3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	4936      	ldr	r1, [pc, #216]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001498:	f7ff fa92 	bl	80009c0 <HAL_GetTick>
 800149c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800149e:	e00a      	b.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014a0:	f7ff fa8e 	bl	80009c0 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e053      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014b6:	4b2d      	ldr	r3, [pc, #180]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 020c 	and.w	r2, r3, #12
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	009b      	lsls	r3, r3, #2
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d1eb      	bne.n	80014a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014c8:	4b27      	ldr	r3, [pc, #156]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0307 	and.w	r3, r3, #7
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d210      	bcs.n	80014f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 0207 	bic.w	r2, r3, #7
 80014de:	4922      	ldr	r1, [pc, #136]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	4313      	orrs	r3, r2
 80014e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e6:	4b20      	ldr	r3, [pc, #128]	; (8001568 <HAL_RCC_ClockConfig+0x1c0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0307 	and.w	r3, r3, #7
 80014ee:	683a      	ldr	r2, [r7, #0]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d001      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e032      	b.n	800155e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	d008      	beq.n	8001516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001504:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	4916      	ldr	r1, [pc, #88]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001512:	4313      	orrs	r3, r2
 8001514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	2b00      	cmp	r3, #0
 8001520:	d009      	beq.n	8001536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001522:	4b12      	ldr	r3, [pc, #72]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	490e      	ldr	r1, [pc, #56]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	4313      	orrs	r3, r2
 8001534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001536:	f000 f821 	bl	800157c <HAL_RCC_GetSysClockFreq>
 800153a:	4601      	mov	r1, r0
 800153c:	4b0b      	ldr	r3, [pc, #44]	; (800156c <HAL_RCC_ClockConfig+0x1c4>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 030f 	and.w	r3, r3, #15
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_RCC_ClockConfig+0x1c8>)
 8001548:	5cd3      	ldrb	r3, [r2, r3]
 800154a:	fa21 f303 	lsr.w	r3, r1, r3
 800154e:	4a09      	ldr	r2, [pc, #36]	; (8001574 <HAL_RCC_ClockConfig+0x1cc>)
 8001550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001552:	4b09      	ldr	r3, [pc, #36]	; (8001578 <HAL_RCC_ClockConfig+0x1d0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7ff f938 	bl	80007cc <HAL_InitTick>

  return HAL_OK;
 800155c:	2300      	movs	r3, #0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40022000 	.word	0x40022000
 800156c:	40021000 	.word	0x40021000
 8001570:	080030d8 	.word	0x080030d8
 8001574:	20000014 	.word	0x20000014
 8001578:	20000018 	.word	0x20000018

0800157c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800157c:	b490      	push	{r4, r7}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001584:	1d3c      	adds	r4, r7, #4
 8001586:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001588:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800158c:	4b28      	ldr	r3, [pc, #160]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb4>)
 800158e:	881b      	ldrh	r3, [r3, #0]
 8001590:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001592:	2300      	movs	r3, #0
 8001594:	61fb      	str	r3, [r7, #28]
 8001596:	2300      	movs	r3, #0
 8001598:	61bb      	str	r3, [r7, #24]
 800159a:	2300      	movs	r3, #0
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015a6:	4b23      	ldr	r3, [pc, #140]	; (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d002      	beq.n	80015bc <HAL_RCC_GetSysClockFreq+0x40>
 80015b6:	2b08      	cmp	r3, #8
 80015b8:	d003      	beq.n	80015c2 <HAL_RCC_GetSysClockFreq+0x46>
 80015ba:	e02d      	b.n	8001618 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015be:	623b      	str	r3, [r7, #32]
      break;
 80015c0:	e02d      	b.n	800161e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	0c9b      	lsrs	r3, r3, #18
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ce:	4413      	add	r3, r2
 80015d0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80015d4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d013      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80015e0:	4b14      	ldr	r3, [pc, #80]	; (8001634 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	0c5b      	lsrs	r3, r3, #17
 80015e6:	f003 0301 	and.w	r3, r3, #1
 80015ea:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80015ee:	4413      	add	r3, r2
 80015f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80015f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	4a0f      	ldr	r2, [pc, #60]	; (8001638 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015fa:	fb02 f203 	mul.w	r2, r2, r3
 80015fe:	69bb      	ldr	r3, [r7, #24]
 8001600:	fbb2 f3f3 	udiv	r3, r2, r3
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
 8001606:	e004      	b.n	8001612 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	4a0c      	ldr	r2, [pc, #48]	; (800163c <HAL_RCC_GetSysClockFreq+0xc0>)
 800160c:	fb02 f303 	mul.w	r3, r2, r3
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001614:	623b      	str	r3, [r7, #32]
      break;
 8001616:	e002      	b.n	800161e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001618:	4b07      	ldr	r3, [pc, #28]	; (8001638 <HAL_RCC_GetSysClockFreq+0xbc>)
 800161a:	623b      	str	r3, [r7, #32]
      break;
 800161c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800161e:	6a3b      	ldr	r3, [r7, #32]
}
 8001620:	4618      	mov	r0, r3
 8001622:	3728      	adds	r7, #40	; 0x28
 8001624:	46bd      	mov	sp, r7
 8001626:	bc90      	pop	{r4, r7}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	080030bc 	.word	0x080030bc
 8001630:	080030cc 	.word	0x080030cc
 8001634:	40021000 	.word	0x40021000
 8001638:	007a1200 	.word	0x007a1200
 800163c:	003d0900 	.word	0x003d0900

08001640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001644:	4b02      	ldr	r3, [pc, #8]	; (8001650 <HAL_RCC_GetHCLKFreq+0x10>)
 8001646:	681b      	ldr	r3, [r3, #0]
}
 8001648:	4618      	mov	r0, r3
 800164a:	46bd      	mov	sp, r7
 800164c:	bc80      	pop	{r7}
 800164e:	4770      	bx	lr
 8001650:	20000014 	.word	0x20000014

08001654 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001658:	f7ff fff2 	bl	8001640 <HAL_RCC_GetHCLKFreq>
 800165c:	4601      	mov	r1, r0
 800165e:	4b05      	ldr	r3, [pc, #20]	; (8001674 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	0adb      	lsrs	r3, r3, #11
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	4a03      	ldr	r2, [pc, #12]	; (8001678 <HAL_RCC_GetPCLK2Freq+0x24>)
 800166a:	5cd3      	ldrb	r3, [r2, r3]
 800166c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001670:	4618      	mov	r0, r3
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000
 8001678:	080030e8 	.word	0x080030e8

0800167c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	220f      	movs	r2, #15
 800168a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800168c:	4b11      	ldr	r3, [pc, #68]	; (80016d4 <HAL_RCC_GetClockConfig+0x58>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 0203 	and.w	r2, r3, #3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001698:	4b0e      	ldr	r3, [pc, #56]	; (80016d4 <HAL_RCC_GetClockConfig+0x58>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80016a4:	4b0b      	ldr	r3, [pc, #44]	; (80016d4 <HAL_RCC_GetClockConfig+0x58>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80016b0:	4b08      	ldr	r3, [pc, #32]	; (80016d4 <HAL_RCC_GetClockConfig+0x58>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	08db      	lsrs	r3, r3, #3
 80016b6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80016be:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <HAL_RCC_GetClockConfig+0x5c>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0207 	and.w	r2, r3, #7
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80016ca:	bf00      	nop
 80016cc:	370c      	adds	r7, #12
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bc80      	pop	{r7}
 80016d2:	4770      	bx	lr
 80016d4:	40021000 	.word	0x40021000
 80016d8:	40022000 	.word	0x40022000

080016dc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80016dc:	b480      	push	{r7}
 80016de:	b085      	sub	sp, #20
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80016e4:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <RCC_Delay+0x34>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a0a      	ldr	r2, [pc, #40]	; (8001714 <RCC_Delay+0x38>)
 80016ea:	fba2 2303 	umull	r2, r3, r2, r3
 80016ee:	0a5b      	lsrs	r3, r3, #9
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	fb02 f303 	mul.w	r3, r2, r3
 80016f6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016f8:	bf00      	nop
  }
  while (Delay --);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1e5a      	subs	r2, r3, #1
 80016fe:	60fa      	str	r2, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f9      	bne.n	80016f8 <RCC_Delay+0x1c>
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	bc80      	pop	{r7}
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000014 	.word	0x20000014
 8001714:	10624dd3 	.word	0x10624dd3

08001718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d101      	bne.n	800172a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e01d      	b.n	8001766 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001730:	b2db      	uxtb	r3, r3
 8001732:	2b00      	cmp	r3, #0
 8001734:	d106      	bne.n	8001744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f815 	bl	800176e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2202      	movs	r2, #2
 8001748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3304      	adds	r3, #4
 8001754:	4619      	mov	r1, r3
 8001756:	4610      	mov	r0, r2
 8001758:	f000 f962 	bl	8001a20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2201      	movs	r2, #1
 8001760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800176e:	b480      	push	{r7}
 8001770:	b083      	sub	sp, #12
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001780:	b480      	push	{r7}
 8001782:	b085      	sub	sp, #20
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f042 0201 	orr.w	r2, r2, #1
 8001796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	2b06      	cmp	r3, #6
 80017a8:	d007      	beq.n	80017ba <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f042 0201 	orr.w	r2, r2, #1
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b082      	sub	sp, #8
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d122      	bne.n	8001822 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	f003 0302 	and.w	r3, r3, #2
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d11b      	bne.n	8001822 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f06f 0202 	mvn.w	r2, #2
 80017f2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2201      	movs	r2, #1
 80017f8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	699b      	ldr	r3, [r3, #24]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b00      	cmp	r3, #0
 8001806:	d003      	beq.n	8001810 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001808:	6878      	ldr	r0, [r7, #4]
 800180a:	f000 f8ed 	bl	80019e8 <HAL_TIM_IC_CaptureCallback>
 800180e:	e005      	b.n	800181c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f000 f8e0 	bl	80019d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f8ef 	bl	80019fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2200      	movs	r2, #0
 8001820:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	2b04      	cmp	r3, #4
 800182e:	d122      	bne.n	8001876 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68db      	ldr	r3, [r3, #12]
 8001836:	f003 0304 	and.w	r3, r3, #4
 800183a:	2b04      	cmp	r3, #4
 800183c:	d11b      	bne.n	8001876 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f06f 0204 	mvn.w	r2, #4
 8001846:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2202      	movs	r2, #2
 800184c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	699b      	ldr	r3, [r3, #24]
 8001854:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	f000 f8c3 	bl	80019e8 <HAL_TIM_IC_CaptureCallback>
 8001862:	e005      	b.n	8001870 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001864:	6878      	ldr	r0, [r7, #4]
 8001866:	f000 f8b6 	bl	80019d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f8c5 	bl	80019fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b08      	cmp	r3, #8
 8001882:	d122      	bne.n	80018ca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	2b08      	cmp	r3, #8
 8001890:	d11b      	bne.n	80018ca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f06f 0208 	mvn.w	r2, #8
 800189a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2204      	movs	r2, #4
 80018a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	f003 0303 	and.w	r3, r3, #3
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 f899 	bl	80019e8 <HAL_TIM_IC_CaptureCallback>
 80018b6:	e005      	b.n	80018c4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f000 f88c 	bl	80019d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f000 f89b 	bl	80019fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	691b      	ldr	r3, [r3, #16]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	2b10      	cmp	r3, #16
 80018d6:	d122      	bne.n	800191e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f003 0310 	and.w	r3, r3, #16
 80018e2:	2b10      	cmp	r3, #16
 80018e4:	d11b      	bne.n	800191e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f06f 0210 	mvn.w	r2, #16
 80018ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2208      	movs	r2, #8
 80018f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f000 f86f 	bl	80019e8 <HAL_TIM_IC_CaptureCallback>
 800190a:	e005      	b.n	8001918 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f000 f862 	bl	80019d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f871 	bl	80019fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	691b      	ldr	r3, [r3, #16]
 8001924:	f003 0301 	and.w	r3, r3, #1
 8001928:	2b01      	cmp	r3, #1
 800192a:	d10e      	bne.n	800194a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	68db      	ldr	r3, [r3, #12]
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b01      	cmp	r3, #1
 8001938:	d107      	bne.n	800194a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f06f 0201 	mvn.w	r2, #1
 8001942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7fe fef1 	bl	800072c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001954:	2b80      	cmp	r3, #128	; 0x80
 8001956:	d10e      	bne.n	8001976 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001962:	2b80      	cmp	r3, #128	; 0x80
 8001964:	d107      	bne.n	8001976 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800196e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f8c0 	bl	8001af6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001980:	2b40      	cmp	r3, #64	; 0x40
 8001982:	d10e      	bne.n	80019a2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	68db      	ldr	r3, [r3, #12]
 800198a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198e:	2b40      	cmp	r3, #64	; 0x40
 8001990:	d107      	bne.n	80019a2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800199a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f835 	bl	8001a0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	691b      	ldr	r3, [r3, #16]
 80019a8:	f003 0320 	and.w	r3, r3, #32
 80019ac:	2b20      	cmp	r3, #32
 80019ae:	d10e      	bne.n	80019ce <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	f003 0320 	and.w	r3, r3, #32
 80019ba:	2b20      	cmp	r3, #32
 80019bc:	d107      	bne.n	80019ce <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f06f 0220 	mvn.w	r2, #32
 80019c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f88b 	bl	8001ae4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80019ce:	bf00      	nop
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}

080019d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d6:	b480      	push	{r7}
 80019d8:	b083      	sub	sp, #12
 80019da:	af00      	add	r7, sp, #0
 80019dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bc80      	pop	{r7}
 80019f8:	4770      	bx	lr

080019fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80019fa:	b480      	push	{r7}
 80019fc:	b083      	sub	sp, #12
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
	...

08001a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b085      	sub	sp, #20
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a29      	ldr	r2, [pc, #164]	; (8001ad8 <TIM_Base_SetConfig+0xb8>)
 8001a34:	4293      	cmp	r3, r2
 8001a36:	d00b      	beq.n	8001a50 <TIM_Base_SetConfig+0x30>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a3e:	d007      	beq.n	8001a50 <TIM_Base_SetConfig+0x30>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	4a26      	ldr	r2, [pc, #152]	; (8001adc <TIM_Base_SetConfig+0xbc>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d003      	beq.n	8001a50 <TIM_Base_SetConfig+0x30>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4a25      	ldr	r2, [pc, #148]	; (8001ae0 <TIM_Base_SetConfig+0xc0>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d108      	bne.n	8001a62 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	68fa      	ldr	r2, [r7, #12]
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <TIM_Base_SetConfig+0xb8>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00b      	beq.n	8001a82 <TIM_Base_SetConfig+0x62>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a70:	d007      	beq.n	8001a82 <TIM_Base_SetConfig+0x62>
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a19      	ldr	r2, [pc, #100]	; (8001adc <TIM_Base_SetConfig+0xbc>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d003      	beq.n	8001a82 <TIM_Base_SetConfig+0x62>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a18      	ldr	r2, [pc, #96]	; (8001ae0 <TIM_Base_SetConfig+0xc0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d108      	bne.n	8001a94 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	4313      	orrs	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68fa      	ldr	r2, [r7, #12]
 8001aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	689a      	ldr	r2, [r3, #8]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a07      	ldr	r2, [pc, #28]	; (8001ad8 <TIM_Base_SetConfig+0xb8>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d103      	bne.n	8001ac8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	691a      	ldr	r2, [r3, #16]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	615a      	str	r2, [r3, #20]
}
 8001ace:	bf00      	nop
 8001ad0:	3714      	adds	r7, #20
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bc80      	pop	{r7}
 8001ad6:	4770      	bx	lr
 8001ad8:	40012c00 	.word	0x40012c00
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40000800 	.word	0x40000800

08001ae4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr

08001af6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b083      	sub	sp, #12
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001afe:	bf00      	nop
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bc80      	pop	{r7}
 8001b06:	4770      	bx	lr

08001b08 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b085      	sub	sp, #20
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	4603      	mov	r3, r0
 8001b10:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8001b16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b1a:	2b84      	cmp	r3, #132	; 0x84
 8001b1c:	d005      	beq.n	8001b2a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8001b1e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	4413      	add	r3, r2
 8001b26:	3303      	adds	r3, #3
 8001b28:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bc80      	pop	{r7}
 8001b34:	4770      	bx	lr

08001b36 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001b36:	b580      	push	{r7, lr}
 8001b38:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001b3a:	f000 fb7b 	bl	8002234 <vTaskStartScheduler>
  
  return osOK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001b44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af04      	add	r7, sp, #16
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	695b      	ldr	r3, [r3, #20]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d020      	beq.n	8001b98 <osThreadCreate+0x54>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d01c      	beq.n	8001b98 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685c      	ldr	r4, [r3, #4]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681d      	ldr	r5, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	691e      	ldr	r6, [r3, #16]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7ff ffc9 	bl	8001b08 <makeFreeRtosPriority>
 8001b76:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	695b      	ldr	r3, [r3, #20]
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b80:	9202      	str	r2, [sp, #8]
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	9100      	str	r1, [sp, #0]
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	4632      	mov	r2, r6
 8001b8a:	4629      	mov	r1, r5
 8001b8c:	4620      	mov	r0, r4
 8001b8e:	f000 f8e8 	bl	8001d62 <xTaskCreateStatic>
 8001b92:	4603      	mov	r3, r0
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	e01c      	b.n	8001bd2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685c      	ldr	r4, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001ba4:	b29e      	uxth	r6, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ffab 	bl	8001b08 <makeFreeRtosPriority>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	9200      	str	r2, [sp, #0]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	4632      	mov	r2, r6
 8001bc0:	4629      	mov	r1, r5
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f000 f926 	bl	8001e14 <xTaskCreate>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d001      	beq.n	8001bd2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	e000      	b.n	8001bd4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3714      	adds	r7, #20
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bdc <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b084      	sub	sp, #16
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <osDelay+0x16>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	e000      	b.n	8001bf4 <osDelay+0x18>
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 fa3b 	bl	8002070 <vTaskDelay>
  
  return osOK;
 8001bfa:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f103 0208 	add.w	r2, r3, #8
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f04f 32ff 	mov.w	r2, #4294967295
 8001c1c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f103 0208 	add.w	r2, r3, #8
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f103 0208 	add.w	r2, r3, #8
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	68fa      	ldr	r2, [r7, #12]
 8001c6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	689a      	ldr	r2, [r3, #8]
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	683a      	ldr	r2, [r7, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	683a      	ldr	r2, [r7, #0]
 8001c84:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	1c5a      	adds	r2, r3, #1
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	601a      	str	r2, [r3, #0]
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb6:	d103      	bne.n	8001cc0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	e00c      	b.n	8001cda <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3308      	adds	r3, #8
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	e002      	b.n	8001cce <vListInsert+0x2e>
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68ba      	ldr	r2, [r7, #8]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d2f6      	bcs.n	8001cc8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	68fa      	ldr	r2, [r7, #12]
 8001cee:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	1c5a      	adds	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	601a      	str	r2, [r3, #0]
}
 8001d06:	bf00      	nop
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6892      	ldr	r2, [r2, #8]
 8001d26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	687a      	ldr	r2, [r7, #4]
 8001d2e:	6852      	ldr	r2, [r2, #4]
 8001d30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d103      	bne.n	8001d44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689a      	ldr	r2, [r3, #8]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	1e5a      	subs	r2, r3, #1
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bc80      	pop	{r7}
 8001d60:	4770      	bx	lr

08001d62 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b08e      	sub	sp, #56	; 0x38
 8001d66:	af04      	add	r7, sp, #16
 8001d68:	60f8      	str	r0, [r7, #12]
 8001d6a:	60b9      	str	r1, [r7, #8]
 8001d6c:	607a      	str	r2, [r7, #4]
 8001d6e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d7a:	f383 8811 	msr	BASEPRI, r3
 8001d7e:	f3bf 8f6f 	isb	sy
 8001d82:	f3bf 8f4f 	dsb	sy
 8001d86:	623b      	str	r3, [r7, #32]
 8001d88:	e7fe      	b.n	8001d88 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8001d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d109      	bne.n	8001da4 <xTaskCreateStatic+0x42>
 8001d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	61fb      	str	r3, [r7, #28]
 8001da2:	e7fe      	b.n	8001da2 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001da4:	2354      	movs	r3, #84	; 0x54
 8001da6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	2b54      	cmp	r3, #84	; 0x54
 8001dac:	d009      	beq.n	8001dc2 <xTaskCreateStatic+0x60>
 8001dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db2:	f383 8811 	msr	BASEPRI, r3
 8001db6:	f3bf 8f6f 	isb	sy
 8001dba:	f3bf 8f4f 	dsb	sy
 8001dbe:	61bb      	str	r3, [r7, #24]
 8001dc0:	e7fe      	b.n	8001dc0 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d01e      	beq.n	8001e06 <xTaskCreateStatic+0xa4>
 8001dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d01b      	beq.n	8001e06 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001dd6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dda:	2202      	movs	r2, #2
 8001ddc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001de0:	2300      	movs	r3, #0
 8001de2:	9303      	str	r3, [sp, #12]
 8001de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de6:	9302      	str	r3, [sp, #8]
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	9301      	str	r3, [sp, #4]
 8001dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	68b9      	ldr	r1, [r7, #8]
 8001df8:	68f8      	ldr	r0, [r7, #12]
 8001dfa:	f000 f850 	bl	8001e9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001dfe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001e00:	f000 f8cc 	bl	8001f9c <prvAddNewTaskToReadyList>
 8001e04:	e001      	b.n	8001e0a <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001e0a:	697b      	ldr	r3, [r7, #20]
	}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3728      	adds	r7, #40	; 0x28
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}

08001e14 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b08c      	sub	sp, #48	; 0x30
 8001e18:	af04      	add	r7, sp, #16
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	4613      	mov	r3, r2
 8001e22:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e24:	88fb      	ldrh	r3, [r7, #6]
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 ff0f 	bl	8002c4c <pvPortMalloc>
 8001e2e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00e      	beq.n	8001e54 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8001e36:	2054      	movs	r0, #84	; 0x54
 8001e38:	f000 ff08 	bl	8002c4c <pvPortMalloc>
 8001e3c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	697a      	ldr	r2, [r7, #20]
 8001e48:	631a      	str	r2, [r3, #48]	; 0x30
 8001e4a:	e005      	b.n	8001e58 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001e4c:	6978      	ldr	r0, [r7, #20]
 8001e4e:	f000 ffbf 	bl	8002dd0 <vPortFree>
 8001e52:	e001      	b.n	8001e58 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001e54:	2300      	movs	r3, #0
 8001e56:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d017      	beq.n	8001e8e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001e66:	88fa      	ldrh	r2, [r7, #6]
 8001e68:	2300      	movs	r3, #0
 8001e6a:	9303      	str	r3, [sp, #12]
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	9302      	str	r3, [sp, #8]
 8001e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e72:	9301      	str	r3, [sp, #4]
 8001e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e76:	9300      	str	r3, [sp, #0]
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	68b9      	ldr	r1, [r7, #8]
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f80e 	bl	8001e9e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001e82:	69f8      	ldr	r0, [r7, #28]
 8001e84:	f000 f88a 	bl	8001f9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	e002      	b.n	8001e94 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001e94:	69bb      	ldr	r3, [r7, #24]
	}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3720      	adds	r7, #32
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}

08001e9e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001e9e:	b580      	push	{r7, lr}
 8001ea0:	b088      	sub	sp, #32
 8001ea2:	af00      	add	r7, sp, #0
 8001ea4:	60f8      	str	r0, [r7, #12]
 8001ea6:	60b9      	str	r1, [r7, #8]
 8001ea8:	607a      	str	r2, [r7, #4]
 8001eaa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8001eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	4413      	add	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	f023 0307 	bic.w	r3, r3, #7
 8001ec4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <prvInitialiseNewTask+0x46>
 8001ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ed4:	f383 8811 	msr	BASEPRI, r3
 8001ed8:	f3bf 8f6f 	isb	sy
 8001edc:	f3bf 8f4f 	dsb	sy
 8001ee0:	617b      	str	r3, [r7, #20]
 8001ee2:	e7fe      	b.n	8001ee2 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	e012      	b.n	8001f10 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001eea:	68ba      	ldr	r2, [r7, #8]
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	4413      	add	r3, r2
 8001ef0:	7819      	ldrb	r1, [r3, #0]
 8001ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	3334      	adds	r3, #52	; 0x34
 8001efa:	460a      	mov	r2, r1
 8001efc:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8001efe:	68ba      	ldr	r2, [r7, #8]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	4413      	add	r3, r2
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d006      	beq.n	8001f18 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	3301      	adds	r3, #1
 8001f0e:	61fb      	str	r3, [r7, #28]
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	2b0f      	cmp	r3, #15
 8001f14:	d9e9      	bls.n	8001eea <prvInitialiseNewTask+0x4c>
 8001f16:	e000      	b.n	8001f1a <prvInitialiseNewTask+0x7c>
		{
			break;
 8001f18:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f24:	2b06      	cmp	r3, #6
 8001f26:	d901      	bls.n	8001f2c <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001f28:	2306      	movs	r3, #6
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f30:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f34:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f36:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001f38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f40:	3304      	adds	r3, #4
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fe7d 	bl	8001c42 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f4a:	3318      	adds	r3, #24
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff fe78 	bl	8001c42 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f56:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f5a:	f1c3 0207 	rsb	r2, r3, #7
 8001f5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f60:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f66:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f70:	2200      	movs	r2, #0
 8001f72:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	68f9      	ldr	r1, [r7, #12]
 8001f7a:	69b8      	ldr	r0, [r7, #24]
 8001f7c:	f000 fcc2 	bl	8002904 <pxPortInitialiseStack>
 8001f80:	4602      	mov	r2, r0
 8001f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f84:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8001f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d002      	beq.n	8001f92 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001f92:	bf00      	nop
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001fa4:	f000 fd98 	bl	8002ad8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001fa8:	4b2a      	ldr	r3, [pc, #168]	; (8002054 <prvAddNewTaskToReadyList+0xb8>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	3301      	adds	r3, #1
 8001fae:	4a29      	ldr	r2, [pc, #164]	; (8002054 <prvAddNewTaskToReadyList+0xb8>)
 8001fb0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001fb2:	4b29      	ldr	r3, [pc, #164]	; (8002058 <prvAddNewTaskToReadyList+0xbc>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001fba:	4a27      	ldr	r2, [pc, #156]	; (8002058 <prvAddNewTaskToReadyList+0xbc>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001fc0:	4b24      	ldr	r3, [pc, #144]	; (8002054 <prvAddNewTaskToReadyList+0xb8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d110      	bne.n	8001fea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001fc8:	f000 fb78 	bl	80026bc <prvInitialiseTaskLists>
 8001fcc:	e00d      	b.n	8001fea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001fce:	4b23      	ldr	r3, [pc, #140]	; (800205c <prvAddNewTaskToReadyList+0xc0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001fd6:	4b20      	ldr	r3, [pc, #128]	; (8002058 <prvAddNewTaskToReadyList+0xbc>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d802      	bhi.n	8001fea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001fe4:	4a1c      	ldr	r2, [pc, #112]	; (8002058 <prvAddNewTaskToReadyList+0xbc>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001fea:	4b1d      	ldr	r3, [pc, #116]	; (8002060 <prvAddNewTaskToReadyList+0xc4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <prvAddNewTaskToReadyList+0xc4>)
 8001ff2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	409a      	lsls	r2, r3
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <prvAddNewTaskToReadyList+0xc8>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4313      	orrs	r3, r2
 8002002:	4a18      	ldr	r2, [pc, #96]	; (8002064 <prvAddNewTaskToReadyList+0xc8>)
 8002004:	6013      	str	r3, [r2, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	4a15      	ldr	r2, [pc, #84]	; (8002068 <prvAddNewTaskToReadyList+0xcc>)
 8002014:	441a      	add	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3304      	adds	r3, #4
 800201a:	4619      	mov	r1, r3
 800201c:	4610      	mov	r0, r2
 800201e:	f7ff fe1c 	bl	8001c5a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002022:	f000 fd87 	bl	8002b34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002026:	4b0d      	ldr	r3, [pc, #52]	; (800205c <prvAddNewTaskToReadyList+0xc0>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d00e      	beq.n	800204c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800202e:	4b0a      	ldr	r3, [pc, #40]	; (8002058 <prvAddNewTaskToReadyList+0xbc>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002038:	429a      	cmp	r2, r3
 800203a:	d207      	bcs.n	800204c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800203c:	4b0b      	ldr	r3, [pc, #44]	; (800206c <prvAddNewTaskToReadyList+0xd0>)
 800203e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002042:	601a      	str	r2, [r3, #0]
 8002044:	f3bf 8f4f 	dsb	sy
 8002048:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800204c:	bf00      	nop
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	200003a0 	.word	0x200003a0
 8002058:	200002a0 	.word	0x200002a0
 800205c:	200003ac 	.word	0x200003ac
 8002060:	200003bc 	.word	0x200003bc
 8002064:	200003a8 	.word	0x200003a8
 8002068:	200002a4 	.word	0x200002a4
 800206c:	e000ed04 	.word	0xe000ed04

08002070 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002078:	2300      	movs	r3, #0
 800207a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d016      	beq.n	80020b0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <vTaskDelay+0x60>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d009      	beq.n	800209e <vTaskDelay+0x2e>
 800208a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800208e:	f383 8811 	msr	BASEPRI, r3
 8002092:	f3bf 8f6f 	isb	sy
 8002096:	f3bf 8f4f 	dsb	sy
 800209a:	60bb      	str	r3, [r7, #8]
 800209c:	e7fe      	b.n	800209c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800209e:	f000 f927 	bl	80022f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80020a2:	2100      	movs	r1, #0
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 fbc7 	bl	8002838 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80020aa:	f000 f92f 	bl	800230c <xTaskResumeAll>
 80020ae:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d107      	bne.n	80020c6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80020b6:	4b07      	ldr	r3, [pc, #28]	; (80020d4 <vTaskDelay+0x64>)
 80020b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020bc:	601a      	str	r2, [r3, #0]
 80020be:	f3bf 8f4f 	dsb	sy
 80020c2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	200003c8 	.word	0x200003c8
 80020d4:	e000ed04 	.word	0xe000ed04

080020d8 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b088      	sub	sp, #32
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	2b06      	cmp	r3, #6
 80020ea:	d909      	bls.n	8002100 <vTaskPrioritySet+0x28>
 80020ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020f0:	f383 8811 	msr	BASEPRI, r3
 80020f4:	f3bf 8f6f 	isb	sy
 80020f8:	f3bf 8f4f 	dsb	sy
 80020fc:	60fb      	str	r3, [r7, #12]
 80020fe:	e7fe      	b.n	80020fe <vTaskPrioritySet+0x26>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	2b06      	cmp	r3, #6
 8002104:	d901      	bls.n	800210a <vTaskPrioritySet+0x32>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002106:	2306      	movs	r3, #6
 8002108:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 800210a:	f000 fce5 	bl	8002ad8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d102      	bne.n	800211a <vTaskPrioritySet+0x42>
 8002114:	4b43      	ldr	r3, [pc, #268]	; (8002224 <vTaskPrioritySet+0x14c>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	e000      	b.n	800211c <vTaskPrioritySet+0x44>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d074      	beq.n	8002216 <vTaskPrioritySet+0x13e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 800212c:	683a      	ldr	r2, [r7, #0]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	429a      	cmp	r2, r3
 8002132:	d90d      	bls.n	8002150 <vTaskPrioritySet+0x78>
				{
					if( pxTCB != pxCurrentTCB )
 8002134:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <vTaskPrioritySet+0x14c>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	429a      	cmp	r2, r3
 800213c:	d00f      	beq.n	800215e <vTaskPrioritySet+0x86>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 800213e:	4b39      	ldr	r3, [pc, #228]	; (8002224 <vTaskPrioritySet+0x14c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	429a      	cmp	r2, r3
 8002148:	d309      	bcc.n	800215e <vTaskPrioritySet+0x86>
						{
							xYieldRequired = pdTRUE;
 800214a:	2301      	movs	r3, #1
 800214c:	61fb      	str	r3, [r7, #28]
 800214e:	e006      	b.n	800215e <vTaskPrioritySet+0x86>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8002150:	4b34      	ldr	r3, [pc, #208]	; (8002224 <vTaskPrioritySet+0x14c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	429a      	cmp	r2, r3
 8002158:	d101      	bne.n	800215e <vTaskPrioritySet+0x86>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 800215a:	2301      	movs	r3, #1
 800215c:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216c:	429a      	cmp	r2, r3
 800216e:	d102      	bne.n	8002176 <vTaskPrioritySet+0x9e>
					{
						pxTCB->uxPriority = uxNewPriority;
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	645a      	str	r2, [r3, #68]	; 0x44
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	2b00      	cmp	r3, #0
 8002182:	db04      	blt.n	800218e <vTaskPrioritySet+0xb6>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	f1c3 0207 	rsb	r2, r3, #7
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800218e:	69bb      	ldr	r3, [r7, #24]
 8002190:	6959      	ldr	r1, [r3, #20]
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4a22      	ldr	r2, [pc, #136]	; (8002228 <vTaskPrioritySet+0x150>)
 800219e:	4413      	add	r3, r2
 80021a0:	4299      	cmp	r1, r3
 80021a2:	d101      	bne.n	80021a8 <vTaskPrioritySet+0xd0>
 80021a4:	2301      	movs	r3, #1
 80021a6:	e000      	b.n	80021aa <vTaskPrioritySet+0xd2>
 80021a8:	2300      	movs	r3, #0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d028      	beq.n	8002200 <vTaskPrioritySet+0x128>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	3304      	adds	r3, #4
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fdac 	bl	8001d10 <uxListRemove>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d109      	bne.n	80021d2 <vTaskPrioritySet+0xfa>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( uxPriorityUsedOnEntry, uxTopReadyPriority );
 80021be:	2201      	movs	r2, #1
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	fa02 f303 	lsl.w	r3, r2, r3
 80021c6:	43da      	mvns	r2, r3
 80021c8:	4b18      	ldr	r3, [pc, #96]	; (800222c <vTaskPrioritySet+0x154>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4013      	ands	r3, r2
 80021ce:	4a17      	ldr	r2, [pc, #92]	; (800222c <vTaskPrioritySet+0x154>)
 80021d0:	6013      	str	r3, [r2, #0]
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	2201      	movs	r2, #1
 80021d8:	409a      	lsls	r2, r3
 80021da:	4b14      	ldr	r3, [pc, #80]	; (800222c <vTaskPrioritySet+0x154>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4313      	orrs	r3, r2
 80021e0:	4a12      	ldr	r2, [pc, #72]	; (800222c <vTaskPrioritySet+0x154>)
 80021e2:	6013      	str	r3, [r2, #0]
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	4a0d      	ldr	r2, [pc, #52]	; (8002228 <vTaskPrioritySet+0x150>)
 80021f2:	441a      	add	r2, r3
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	3304      	adds	r3, #4
 80021f8:	4619      	mov	r1, r3
 80021fa:	4610      	mov	r0, r2
 80021fc:	f7ff fd2d 	bl	8001c5a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <vTaskPrioritySet+0x13e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8002206:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <vTaskPrioritySet+0x158>)
 8002208:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800220c:	601a      	str	r2, [r3, #0]
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8002216:	f000 fc8d 	bl	8002b34 <vPortExitCritical>
	}
 800221a:	bf00      	nop
 800221c:	3720      	adds	r7, #32
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	200002a0 	.word	0x200002a0
 8002228:	200002a4 	.word	0x200002a4
 800222c:	200003a8 	.word	0x200003a8
 8002230:	e000ed04 	.word	0xe000ed04

08002234 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b08a      	sub	sp, #40	; 0x28
 8002238:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800223a:	2300      	movs	r3, #0
 800223c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002242:	463a      	mov	r2, r7
 8002244:	1d39      	adds	r1, r7, #4
 8002246:	f107 0308 	add.w	r3, r7, #8
 800224a:	4618      	mov	r0, r3
 800224c:	f7fd ff80 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002250:	6839      	ldr	r1, [r7, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68ba      	ldr	r2, [r7, #8]
 8002256:	9202      	str	r2, [sp, #8]
 8002258:	9301      	str	r3, [sp, #4]
 800225a:	2300      	movs	r3, #0
 800225c:	9300      	str	r3, [sp, #0]
 800225e:	2300      	movs	r3, #0
 8002260:	460a      	mov	r2, r1
 8002262:	491d      	ldr	r1, [pc, #116]	; (80022d8 <vTaskStartScheduler+0xa4>)
 8002264:	481d      	ldr	r0, [pc, #116]	; (80022dc <vTaskStartScheduler+0xa8>)
 8002266:	f7ff fd7c 	bl	8001d62 <xTaskCreateStatic>
 800226a:	4602      	mov	r2, r0
 800226c:	4b1c      	ldr	r3, [pc, #112]	; (80022e0 <vTaskStartScheduler+0xac>)
 800226e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002270:	4b1b      	ldr	r3, [pc, #108]	; (80022e0 <vTaskStartScheduler+0xac>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002278:	2301      	movs	r3, #1
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	e001      	b.n	8002282 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800227e:	2300      	movs	r3, #0
 8002280:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d115      	bne.n	80022b4 <vTaskStartScheduler+0x80>
 8002288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800228c:	f383 8811 	msr	BASEPRI, r3
 8002290:	f3bf 8f6f 	isb	sy
 8002294:	f3bf 8f4f 	dsb	sy
 8002298:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800229a:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <vTaskStartScheduler+0xb0>)
 800229c:	f04f 32ff 	mov.w	r2, #4294967295
 80022a0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <vTaskStartScheduler+0xb4>)
 80022a4:	2201      	movs	r2, #1
 80022a6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80022a8:	4b10      	ldr	r3, [pc, #64]	; (80022ec <vTaskStartScheduler+0xb8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80022ae:	f000 fba3 	bl	80029f8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80022b2:	e00d      	b.n	80022d0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ba:	d109      	bne.n	80022d0 <vTaskStartScheduler+0x9c>
 80022bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c0:	f383 8811 	msr	BASEPRI, r3
 80022c4:	f3bf 8f6f 	isb	sy
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	e7fe      	b.n	80022ce <vTaskStartScheduler+0x9a>
}
 80022d0:	bf00      	nop
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	080030d0 	.word	0x080030d0
 80022dc:	0800268d 	.word	0x0800268d
 80022e0:	200003c4 	.word	0x200003c4
 80022e4:	200003c0 	.word	0x200003c0
 80022e8:	200003ac 	.word	0x200003ac
 80022ec:	200003a4 	.word	0x200003a4

080022f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80022f4:	4b04      	ldr	r3, [pc, #16]	; (8002308 <vTaskSuspendAll+0x18>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	3301      	adds	r3, #1
 80022fa:	4a03      	ldr	r2, [pc, #12]	; (8002308 <vTaskSuspendAll+0x18>)
 80022fc:	6013      	str	r3, [r2, #0]
}
 80022fe:	bf00      	nop
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	200003c8 	.word	0x200003c8

0800230c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b084      	sub	sp, #16
 8002310:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002316:	2300      	movs	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800231a:	4b41      	ldr	r3, [pc, #260]	; (8002420 <xTaskResumeAll+0x114>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d109      	bne.n	8002336 <xTaskResumeAll+0x2a>
 8002322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002326:	f383 8811 	msr	BASEPRI, r3
 800232a:	f3bf 8f6f 	isb	sy
 800232e:	f3bf 8f4f 	dsb	sy
 8002332:	603b      	str	r3, [r7, #0]
 8002334:	e7fe      	b.n	8002334 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002336:	f000 fbcf 	bl	8002ad8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800233a:	4b39      	ldr	r3, [pc, #228]	; (8002420 <xTaskResumeAll+0x114>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	3b01      	subs	r3, #1
 8002340:	4a37      	ldr	r2, [pc, #220]	; (8002420 <xTaskResumeAll+0x114>)
 8002342:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002344:	4b36      	ldr	r3, [pc, #216]	; (8002420 <xTaskResumeAll+0x114>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d161      	bne.n	8002410 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800234c:	4b35      	ldr	r3, [pc, #212]	; (8002424 <xTaskResumeAll+0x118>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d05d      	beq.n	8002410 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002354:	e02e      	b.n	80023b4 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002356:	4b34      	ldr	r3, [pc, #208]	; (8002428 <xTaskResumeAll+0x11c>)
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	3318      	adds	r3, #24
 8002362:	4618      	mov	r0, r3
 8002364:	f7ff fcd4 	bl	8001d10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	3304      	adds	r3, #4
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff fccf 	bl	8001d10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002376:	2201      	movs	r2, #1
 8002378:	409a      	lsls	r2, r3
 800237a:	4b2c      	ldr	r3, [pc, #176]	; (800242c <xTaskResumeAll+0x120>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	4a2a      	ldr	r2, [pc, #168]	; (800242c <xTaskResumeAll+0x120>)
 8002382:	6013      	str	r3, [r2, #0]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002388:	4613      	mov	r3, r2
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	4413      	add	r3, r2
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4a27      	ldr	r2, [pc, #156]	; (8002430 <xTaskResumeAll+0x124>)
 8002392:	441a      	add	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	3304      	adds	r3, #4
 8002398:	4619      	mov	r1, r3
 800239a:	4610      	mov	r0, r2
 800239c:	f7ff fc5d 	bl	8001c5a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a4:	4b23      	ldr	r3, [pc, #140]	; (8002434 <xTaskResumeAll+0x128>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d302      	bcc.n	80023b4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80023ae:	4b22      	ldr	r3, [pc, #136]	; (8002438 <xTaskResumeAll+0x12c>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80023b4:	4b1c      	ldr	r3, [pc, #112]	; (8002428 <xTaskResumeAll+0x11c>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1cc      	bne.n	8002356 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d001      	beq.n	80023c6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80023c2:	f000 fa15 	bl	80027f0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <xTaskResumeAll+0x130>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d010      	beq.n	80023f4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80023d2:	f000 f845 	bl	8002460 <xTaskIncrementTick>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80023dc:	4b16      	ldr	r3, [pc, #88]	; (8002438 <xTaskResumeAll+0x12c>)
 80023de:	2201      	movs	r2, #1
 80023e0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f1      	bne.n	80023d2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80023ee:	4b13      	ldr	r3, [pc, #76]	; (800243c <xTaskResumeAll+0x130>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <xTaskResumeAll+0x12c>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d009      	beq.n	8002410 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80023fc:	2301      	movs	r3, #1
 80023fe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002400:	4b0f      	ldr	r3, [pc, #60]	; (8002440 <xTaskResumeAll+0x134>)
 8002402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002410:	f000 fb90 	bl	8002b34 <vPortExitCritical>

	return xAlreadyYielded;
 8002414:	68bb      	ldr	r3, [r7, #8]
}
 8002416:	4618      	mov	r0, r3
 8002418:	3710      	adds	r7, #16
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
 800241e:	bf00      	nop
 8002420:	200003c8 	.word	0x200003c8
 8002424:	200003a0 	.word	0x200003a0
 8002428:	20000360 	.word	0x20000360
 800242c:	200003a8 	.word	0x200003a8
 8002430:	200002a4 	.word	0x200002a4
 8002434:	200002a0 	.word	0x200002a0
 8002438:	200003b4 	.word	0x200003b4
 800243c:	200003b0 	.word	0x200003b0
 8002440:	e000ed04 	.word	0xe000ed04

08002444 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800244a:	4b04      	ldr	r3, [pc, #16]	; (800245c <xTaskGetTickCount+0x18>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002450:	687b      	ldr	r3, [r7, #4]
}
 8002452:	4618      	mov	r0, r3
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	bc80      	pop	{r7}
 800245a:	4770      	bx	lr
 800245c:	200003a4 	.word	0x200003a4

08002460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002466:	2300      	movs	r3, #0
 8002468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800246a:	4b50      	ldr	r3, [pc, #320]	; (80025ac <xTaskIncrementTick+0x14c>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 808c 	bne.w	800258c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002474:	4b4e      	ldr	r3, [pc, #312]	; (80025b0 <xTaskIncrementTick+0x150>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	3301      	adds	r3, #1
 800247a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800247c:	4a4c      	ldr	r2, [pc, #304]	; (80025b0 <xTaskIncrementTick+0x150>)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d11f      	bne.n	80024c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8002488:	4b4a      	ldr	r3, [pc, #296]	; (80025b4 <xTaskIncrementTick+0x154>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <xTaskIncrementTick+0x46>
 8002492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002496:	f383 8811 	msr	BASEPRI, r3
 800249a:	f3bf 8f6f 	isb	sy
 800249e:	f3bf 8f4f 	dsb	sy
 80024a2:	603b      	str	r3, [r7, #0]
 80024a4:	e7fe      	b.n	80024a4 <xTaskIncrementTick+0x44>
 80024a6:	4b43      	ldr	r3, [pc, #268]	; (80025b4 <xTaskIncrementTick+0x154>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	4b42      	ldr	r3, [pc, #264]	; (80025b8 <xTaskIncrementTick+0x158>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a40      	ldr	r2, [pc, #256]	; (80025b4 <xTaskIncrementTick+0x154>)
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	4a40      	ldr	r2, [pc, #256]	; (80025b8 <xTaskIncrementTick+0x158>)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	4b40      	ldr	r3, [pc, #256]	; (80025bc <xTaskIncrementTick+0x15c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3301      	adds	r3, #1
 80024c0:	4a3e      	ldr	r2, [pc, #248]	; (80025bc <xTaskIncrementTick+0x15c>)
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	f000 f994 	bl	80027f0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80024c8:	4b3d      	ldr	r3, [pc, #244]	; (80025c0 <xTaskIncrementTick+0x160>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d34d      	bcc.n	800256e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <xTaskIncrementTick+0x154>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <xTaskIncrementTick+0x80>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <xTaskIncrementTick+0x82>
 80024e0:	2300      	movs	r3, #0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e6:	4b36      	ldr	r3, [pc, #216]	; (80025c0 <xTaskIncrementTick+0x160>)
 80024e8:	f04f 32ff 	mov.w	r2, #4294967295
 80024ec:	601a      	str	r2, [r3, #0]
					break;
 80024ee:	e03e      	b.n	800256e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80024f0:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <xTaskIncrementTick+0x154>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	429a      	cmp	r2, r3
 8002506:	d203      	bcs.n	8002510 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002508:	4a2d      	ldr	r2, [pc, #180]	; (80025c0 <xTaskIncrementTick+0x160>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
						break;
 800250e:	e02e      	b.n	800256e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	3304      	adds	r3, #4
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff fbfb 	bl	8001d10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	2b00      	cmp	r3, #0
 8002520:	d004      	beq.n	800252c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	3318      	adds	r3, #24
 8002526:	4618      	mov	r0, r3
 8002528:	f7ff fbf2 	bl	8001d10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	2201      	movs	r2, #1
 8002532:	409a      	lsls	r2, r3
 8002534:	4b23      	ldr	r3, [pc, #140]	; (80025c4 <xTaskIncrementTick+0x164>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4313      	orrs	r3, r2
 800253a:	4a22      	ldr	r2, [pc, #136]	; (80025c4 <xTaskIncrementTick+0x164>)
 800253c:	6013      	str	r3, [r2, #0]
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002542:	4613      	mov	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4a1f      	ldr	r2, [pc, #124]	; (80025c8 <xTaskIncrementTick+0x168>)
 800254c:	441a      	add	r2, r3
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	3304      	adds	r3, #4
 8002552:	4619      	mov	r1, r3
 8002554:	4610      	mov	r0, r2
 8002556:	f7ff fb80 	bl	8001c5a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800255e:	4b1b      	ldr	r3, [pc, #108]	; (80025cc <xTaskIncrementTick+0x16c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002564:	429a      	cmp	r2, r3
 8002566:	d3b4      	bcc.n	80024d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8002568:	2301      	movs	r3, #1
 800256a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800256c:	e7b1      	b.n	80024d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <xTaskIncrementTick+0x16c>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002574:	4914      	ldr	r1, [pc, #80]	; (80025c8 <xTaskIncrementTick+0x168>)
 8002576:	4613      	mov	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4413      	add	r3, r2
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	440b      	add	r3, r1
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d907      	bls.n	8002596 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8002586:	2301      	movs	r3, #1
 8002588:	617b      	str	r3, [r7, #20]
 800258a:	e004      	b.n	8002596 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800258c:	4b10      	ldr	r3, [pc, #64]	; (80025d0 <xTaskIncrementTick+0x170>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	3301      	adds	r3, #1
 8002592:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <xTaskIncrementTick+0x170>)
 8002594:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8002596:	4b0f      	ldr	r3, [pc, #60]	; (80025d4 <xTaskIncrementTick+0x174>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800259e:	2301      	movs	r3, #1
 80025a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80025a2:	697b      	ldr	r3, [r7, #20]
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200003c8 	.word	0x200003c8
 80025b0:	200003a4 	.word	0x200003a4
 80025b4:	20000358 	.word	0x20000358
 80025b8:	2000035c 	.word	0x2000035c
 80025bc:	200003b8 	.word	0x200003b8
 80025c0:	200003c0 	.word	0x200003c0
 80025c4:	200003a8 	.word	0x200003a8
 80025c8:	200002a4 	.word	0x200002a4
 80025cc:	200002a0 	.word	0x200002a0
 80025d0:	200003b0 	.word	0x200003b0
 80025d4:	200003b4 	.word	0x200003b4

080025d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80025d8:	b480      	push	{r7}
 80025da:	b087      	sub	sp, #28
 80025dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80025de:	4b26      	ldr	r3, [pc, #152]	; (8002678 <vTaskSwitchContext+0xa0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80025e6:	4b25      	ldr	r3, [pc, #148]	; (800267c <vTaskSwitchContext+0xa4>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80025ec:	e03e      	b.n	800266c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80025ee:	4b23      	ldr	r3, [pc, #140]	; (800267c <vTaskSwitchContext+0xa4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80025f4:	4b22      	ldr	r3, [pc, #136]	; (8002680 <vTaskSwitchContext+0xa8>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	fab3 f383 	clz	r3, r3
 8002600:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002602:	7afb      	ldrb	r3, [r7, #11]
 8002604:	f1c3 031f 	rsb	r3, r3, #31
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	491e      	ldr	r1, [pc, #120]	; (8002684 <vTaskSwitchContext+0xac>)
 800260c:	697a      	ldr	r2, [r7, #20]
 800260e:	4613      	mov	r3, r2
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d109      	bne.n	8002632 <vTaskSwitchContext+0x5a>
	__asm volatile
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	607b      	str	r3, [r7, #4]
 8002630:	e7fe      	b.n	8002630 <vTaskSwitchContext+0x58>
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4613      	mov	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	4a11      	ldr	r2, [pc, #68]	; (8002684 <vTaskSwitchContext+0xac>)
 800263e:	4413      	add	r3, r2
 8002640:	613b      	str	r3, [r7, #16]
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	685a      	ldr	r2, [r3, #4]
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	685a      	ldr	r2, [r3, #4]
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	3308      	adds	r3, #8
 8002654:	429a      	cmp	r2, r3
 8002656:	d104      	bne.n	8002662 <vTaskSwitchContext+0x8a>
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	4a07      	ldr	r2, [pc, #28]	; (8002688 <vTaskSwitchContext+0xb0>)
 800266a:	6013      	str	r3, [r2, #0]
}
 800266c:	bf00      	nop
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	200003c8 	.word	0x200003c8
 800267c:	200003b4 	.word	0x200003b4
 8002680:	200003a8 	.word	0x200003a8
 8002684:	200002a4 	.word	0x200002a4
 8002688:	200002a0 	.word	0x200002a0

0800268c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002694:	f000 f852 	bl	800273c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002698:	4b06      	ldr	r3, [pc, #24]	; (80026b4 <prvIdleTask+0x28>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d9f9      	bls.n	8002694 <prvIdleTask+0x8>
			{
				taskYIELD();
 80026a0:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <prvIdleTask+0x2c>)
 80026a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80026b0:	e7f0      	b.n	8002694 <prvIdleTask+0x8>
 80026b2:	bf00      	nop
 80026b4:	200002a4 	.word	0x200002a4
 80026b8:	e000ed04 	.word	0xe000ed04

080026bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026c2:	2300      	movs	r3, #0
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	e00c      	b.n	80026e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4a12      	ldr	r2, [pc, #72]	; (800271c <prvInitialiseTaskLists+0x60>)
 80026d4:	4413      	add	r3, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff fa94 	bl	8001c04 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	3301      	adds	r3, #1
 80026e0:	607b      	str	r3, [r7, #4]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2b06      	cmp	r3, #6
 80026e6:	d9ef      	bls.n	80026c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80026e8:	480d      	ldr	r0, [pc, #52]	; (8002720 <prvInitialiseTaskLists+0x64>)
 80026ea:	f7ff fa8b 	bl	8001c04 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80026ee:	480d      	ldr	r0, [pc, #52]	; (8002724 <prvInitialiseTaskLists+0x68>)
 80026f0:	f7ff fa88 	bl	8001c04 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80026f4:	480c      	ldr	r0, [pc, #48]	; (8002728 <prvInitialiseTaskLists+0x6c>)
 80026f6:	f7ff fa85 	bl	8001c04 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80026fa:	480c      	ldr	r0, [pc, #48]	; (800272c <prvInitialiseTaskLists+0x70>)
 80026fc:	f7ff fa82 	bl	8001c04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002700:	480b      	ldr	r0, [pc, #44]	; (8002730 <prvInitialiseTaskLists+0x74>)
 8002702:	f7ff fa7f 	bl	8001c04 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002706:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <prvInitialiseTaskLists+0x78>)
 8002708:	4a05      	ldr	r2, [pc, #20]	; (8002720 <prvInitialiseTaskLists+0x64>)
 800270a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800270c:	4b0a      	ldr	r3, [pc, #40]	; (8002738 <prvInitialiseTaskLists+0x7c>)
 800270e:	4a05      	ldr	r2, [pc, #20]	; (8002724 <prvInitialiseTaskLists+0x68>)
 8002710:	601a      	str	r2, [r3, #0]
}
 8002712:	bf00      	nop
 8002714:	3708      	adds	r7, #8
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200002a4 	.word	0x200002a4
 8002720:	20000330 	.word	0x20000330
 8002724:	20000344 	.word	0x20000344
 8002728:	20000360 	.word	0x20000360
 800272c:	20000374 	.word	0x20000374
 8002730:	2000038c 	.word	0x2000038c
 8002734:	20000358 	.word	0x20000358
 8002738:	2000035c 	.word	0x2000035c

0800273c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002742:	e019      	b.n	8002778 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002744:	f000 f9c8 	bl	8002ad8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <prvCheckTasksWaitingTermination+0x4c>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3304      	adds	r3, #4
 8002754:	4618      	mov	r0, r3
 8002756:	f7ff fadb 	bl	8001d10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800275a:	4b0c      	ldr	r3, [pc, #48]	; (800278c <prvCheckTasksWaitingTermination+0x50>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3b01      	subs	r3, #1
 8002760:	4a0a      	ldr	r2, [pc, #40]	; (800278c <prvCheckTasksWaitingTermination+0x50>)
 8002762:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002764:	4b0a      	ldr	r3, [pc, #40]	; (8002790 <prvCheckTasksWaitingTermination+0x54>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	3b01      	subs	r3, #1
 800276a:	4a09      	ldr	r2, [pc, #36]	; (8002790 <prvCheckTasksWaitingTermination+0x54>)
 800276c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800276e:	f000 f9e1 	bl	8002b34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 f80e 	bl	8002794 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002778:	4b05      	ldr	r3, [pc, #20]	; (8002790 <prvCheckTasksWaitingTermination+0x54>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1e1      	bne.n	8002744 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002780:	bf00      	nop
 8002782:	3708      	adds	r7, #8
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	20000374 	.word	0x20000374
 800278c:	200003a0 	.word	0x200003a0
 8002790:	20000388 	.word	0x20000388

08002794 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d108      	bne.n	80027b8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027aa:	4618      	mov	r0, r3
 80027ac:	f000 fb10 	bl	8002dd0 <vPortFree>
				vPortFree( pxTCB );
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 fb0d 	bl	8002dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80027b6:	e017      	b.n	80027e8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d103      	bne.n	80027ca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 fb04 	bl	8002dd0 <vPortFree>
	}
 80027c8:	e00e      	b.n	80027e8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d009      	beq.n	80027e8 <prvDeleteTCB+0x54>
 80027d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027d8:	f383 8811 	msr	BASEPRI, r3
 80027dc:	f3bf 8f6f 	isb	sy
 80027e0:	f3bf 8f4f 	dsb	sy
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	e7fe      	b.n	80027e6 <prvDeleteTCB+0x52>
	}
 80027e8:	bf00      	nop
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80027f6:	4b0e      	ldr	r3, [pc, #56]	; (8002830 <prvResetNextTaskUnblockTime+0x40>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <prvResetNextTaskUnblockTime+0x14>
 8002800:	2301      	movs	r3, #1
 8002802:	e000      	b.n	8002806 <prvResetNextTaskUnblockTime+0x16>
 8002804:	2300      	movs	r3, #0
 8002806:	2b00      	cmp	r3, #0
 8002808:	d004      	beq.n	8002814 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <prvResetNextTaskUnblockTime+0x44>)
 800280c:	f04f 32ff 	mov.w	r2, #4294967295
 8002810:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002812:	e008      	b.n	8002826 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <prvResetNextTaskUnblockTime+0x40>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	4a04      	ldr	r2, [pc, #16]	; (8002834 <prvResetNextTaskUnblockTime+0x44>)
 8002824:	6013      	str	r3, [r2, #0]
}
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	20000358 	.word	0x20000358
 8002834:	200003c0 	.word	0x200003c0

08002838 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002842:	4b29      	ldr	r3, [pc, #164]	; (80028e8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002848:	4b28      	ldr	r3, [pc, #160]	; (80028ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	3304      	adds	r3, #4
 800284e:	4618      	mov	r0, r3
 8002850:	f7ff fa5e 	bl	8001d10 <uxListRemove>
 8002854:	4603      	mov	r3, r0
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10b      	bne.n	8002872 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800285a:	4b24      	ldr	r3, [pc, #144]	; (80028ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002860:	2201      	movs	r2, #1
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43da      	mvns	r2, r3
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4013      	ands	r3, r2
 800286e:	4a20      	ldr	r2, [pc, #128]	; (80028f0 <prvAddCurrentTaskToDelayedList+0xb8>)
 8002870:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d10a      	bne.n	8002890 <prvAddCurrentTaskToDelayedList+0x58>
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002880:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <prvAddCurrentTaskToDelayedList+0xb4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3304      	adds	r3, #4
 8002886:	4619      	mov	r1, r3
 8002888:	481a      	ldr	r0, [pc, #104]	; (80028f4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800288a:	f7ff f9e6 	bl	8001c5a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800288e:	e026      	b.n	80028de <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8002890:	68fa      	ldr	r2, [r7, #12]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002898:	4b14      	ldr	r3, [pc, #80]	; (80028ec <prvAddCurrentTaskToDelayedList+0xb4>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	68ba      	ldr	r2, [r7, #8]
 800289e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d209      	bcs.n	80028bc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028a8:	4b13      	ldr	r3, [pc, #76]	; (80028f8 <prvAddCurrentTaskToDelayedList+0xc0>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	4b0f      	ldr	r3, [pc, #60]	; (80028ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	3304      	adds	r3, #4
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f7ff f9f3 	bl	8001ca0 <vListInsert>
}
 80028ba:	e010      	b.n	80028de <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80028bc:	4b0f      	ldr	r3, [pc, #60]	; (80028fc <prvAddCurrentTaskToDelayedList+0xc4>)
 80028be:	681a      	ldr	r2, [r3, #0]
 80028c0:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <prvAddCurrentTaskToDelayedList+0xb4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3304      	adds	r3, #4
 80028c6:	4619      	mov	r1, r3
 80028c8:	4610      	mov	r0, r2
 80028ca:	f7ff f9e9 	bl	8001ca0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80028ce:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d202      	bcs.n	80028de <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80028d8:	4a09      	ldr	r2, [pc, #36]	; (8002900 <prvAddCurrentTaskToDelayedList+0xc8>)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	6013      	str	r3, [r2, #0]
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200003a4 	.word	0x200003a4
 80028ec:	200002a0 	.word	0x200002a0
 80028f0:	200003a8 	.word	0x200003a8
 80028f4:	2000038c 	.word	0x2000038c
 80028f8:	2000035c 	.word	0x2000035c
 80028fc:	20000358 	.word	0x20000358
 8002900:	200003c0 	.word	0x200003c0

08002904 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002904:	b480      	push	{r7}
 8002906:	b085      	sub	sp, #20
 8002908:	af00      	add	r7, sp, #0
 800290a:	60f8      	str	r0, [r7, #12]
 800290c:	60b9      	str	r1, [r7, #8]
 800290e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	3b04      	subs	r3, #4
 8002914:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800291c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	3b04      	subs	r3, #4
 8002922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	f023 0201 	bic.w	r2, r3, #1
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3b04      	subs	r3, #4
 8002932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002934:	4a08      	ldr	r2, [pc, #32]	; (8002958 <pxPortInitialiseStack+0x54>)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	3b14      	subs	r3, #20
 800293e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	3b20      	subs	r3, #32
 800294a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800294c:	68fb      	ldr	r3, [r7, #12]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	0800295d 	.word	0x0800295d

0800295c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8002962:	2300      	movs	r3, #0
 8002964:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002966:	4b10      	ldr	r3, [pc, #64]	; (80029a8 <prvTaskExitError+0x4c>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800296e:	d009      	beq.n	8002984 <prvTaskExitError+0x28>
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	60fb      	str	r3, [r7, #12]
 8002982:	e7fe      	b.n	8002982 <prvTaskExitError+0x26>
 8002984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002988:	f383 8811 	msr	BASEPRI, r3
 800298c:	f3bf 8f6f 	isb	sy
 8002990:	f3bf 8f4f 	dsb	sy
 8002994:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002996:	bf00      	nop
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d0fc      	beq.n	8002998 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr
 80029a8:	20000020 	.word	0x20000020
 80029ac:	00000000 	.word	0x00000000

080029b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80029b0:	4b07      	ldr	r3, [pc, #28]	; (80029d0 <pxCurrentTCBConst2>)
 80029b2:	6819      	ldr	r1, [r3, #0]
 80029b4:	6808      	ldr	r0, [r1, #0]
 80029b6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80029ba:	f380 8809 	msr	PSP, r0
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f04f 0000 	mov.w	r0, #0
 80029c6:	f380 8811 	msr	BASEPRI, r0
 80029ca:	f04e 0e0d 	orr.w	lr, lr, #13
 80029ce:	4770      	bx	lr

080029d0 <pxCurrentTCBConst2>:
 80029d0:	200002a0 	.word	0x200002a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80029d4:	bf00      	nop
 80029d6:	bf00      	nop

080029d8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80029d8:	4806      	ldr	r0, [pc, #24]	; (80029f4 <prvPortStartFirstTask+0x1c>)
 80029da:	6800      	ldr	r0, [r0, #0]
 80029dc:	6800      	ldr	r0, [r0, #0]
 80029de:	f380 8808 	msr	MSP, r0
 80029e2:	b662      	cpsie	i
 80029e4:	b661      	cpsie	f
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	df00      	svc	0
 80029f0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80029f2:	bf00      	nop
 80029f4:	e000ed08 	.word	0xe000ed08

080029f8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80029fe:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <xPortStartScheduler+0xcc>)
 8002a00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	b2db      	uxtb	r3, r3
 8002a08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	22ff      	movs	r2, #255	; 0xff
 8002a0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <xPortStartScheduler+0xd0>)
 8002a24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002a26:	4b29      	ldr	r3, [pc, #164]	; (8002acc <xPortStartScheduler+0xd4>)
 8002a28:	2207      	movs	r2, #7
 8002a2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a2c:	e009      	b.n	8002a42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8002a2e:	4b27      	ldr	r3, [pc, #156]	; (8002acc <xPortStartScheduler+0xd4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	3b01      	subs	r3, #1
 8002a34:	4a25      	ldr	r2, [pc, #148]	; (8002acc <xPortStartScheduler+0xd4>)
 8002a36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002a38:	78fb      	ldrb	r3, [r7, #3]
 8002a3a:	b2db      	uxtb	r3, r3
 8002a3c:	005b      	lsls	r3, r3, #1
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002a42:	78fb      	ldrb	r3, [r7, #3]
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b80      	cmp	r3, #128	; 0x80
 8002a4c:	d0ef      	beq.n	8002a2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002a4e:	4b1f      	ldr	r3, [pc, #124]	; (8002acc <xPortStartScheduler+0xd4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f1c3 0307 	rsb	r3, r3, #7
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d009      	beq.n	8002a6e <xPortStartScheduler+0x76>
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	e7fe      	b.n	8002a6c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002a6e:	4b17      	ldr	r3, [pc, #92]	; (8002acc <xPortStartScheduler+0xd4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	021b      	lsls	r3, r3, #8
 8002a74:	4a15      	ldr	r2, [pc, #84]	; (8002acc <xPortStartScheduler+0xd4>)
 8002a76:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <xPortStartScheduler+0xd4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a80:	4a12      	ldr	r2, [pc, #72]	; (8002acc <xPortStartScheduler+0xd4>)
 8002a82:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002a8c:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <xPortStartScheduler+0xd8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a0f      	ldr	r2, [pc, #60]	; (8002ad0 <xPortStartScheduler+0xd8>)
 8002a92:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a96:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002a98:	4b0d      	ldr	r3, [pc, #52]	; (8002ad0 <xPortStartScheduler+0xd8>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0c      	ldr	r2, [pc, #48]	; (8002ad0 <xPortStartScheduler+0xd8>)
 8002a9e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002aa2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8002aa4:	f000 f8b0 	bl	8002c08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002aa8:	4b0a      	ldr	r3, [pc, #40]	; (8002ad4 <xPortStartScheduler+0xdc>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002aae:	f7ff ff93 	bl	80029d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8002ab2:	f7ff fd91 	bl	80025d8 <vTaskSwitchContext>
	prvTaskExitError();
 8002ab6:	f7ff ff51 	bl	800295c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	e000e400 	.word	0xe000e400
 8002ac8:	200003cc 	.word	0x200003cc
 8002acc:	200003d0 	.word	0x200003d0
 8002ad0:	e000ed20 	.word	0xe000ed20
 8002ad4:	20000020 	.word	0x20000020

08002ad8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002af0:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <vPortEnterCritical+0x54>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	3301      	adds	r3, #1
 8002af6:	4a0d      	ldr	r2, [pc, #52]	; (8002b2c <vPortEnterCritical+0x54>)
 8002af8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002afa:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <vPortEnterCritical+0x54>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d10e      	bne.n	8002b20 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b02:	4b0b      	ldr	r3, [pc, #44]	; (8002b30 <vPortEnterCritical+0x58>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d009      	beq.n	8002b20 <vPortEnterCritical+0x48>
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	603b      	str	r3, [r7, #0]
 8002b1e:	e7fe      	b.n	8002b1e <vPortEnterCritical+0x46>
	}
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bc80      	pop	{r7}
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20000020 	.word	0x20000020
 8002b30:	e000ed04 	.word	0xe000ed04

08002b34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8002b3a:	4b10      	ldr	r3, [pc, #64]	; (8002b7c <vPortExitCritical+0x48>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <vPortExitCritical+0x22>
 8002b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	607b      	str	r3, [r7, #4]
 8002b54:	e7fe      	b.n	8002b54 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <vPortExitCritical+0x48>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	4a07      	ldr	r2, [pc, #28]	; (8002b7c <vPortExitCritical+0x48>)
 8002b5e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002b60:	4b06      	ldr	r3, [pc, #24]	; (8002b7c <vPortExitCritical+0x48>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d104      	bne.n	8002b72 <vPortExitCritical+0x3e>
 8002b68:	2300      	movs	r3, #0
 8002b6a:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bc80      	pop	{r7}
 8002b7a:	4770      	bx	lr
 8002b7c:	20000020 	.word	0x20000020

08002b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002b80:	f3ef 8009 	mrs	r0, PSP
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <pxCurrentTCBConst>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b90:	6010      	str	r0, [r2, #0]
 8002b92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8002b96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002b9a:	f380 8811 	msr	BASEPRI, r0
 8002b9e:	f7ff fd1b 	bl	80025d8 <vTaskSwitchContext>
 8002ba2:	f04f 0000 	mov.w	r0, #0
 8002ba6:	f380 8811 	msr	BASEPRI, r0
 8002baa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8002bae:	6819      	ldr	r1, [r3, #0]
 8002bb0:	6808      	ldr	r0, [r1, #0]
 8002bb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002bb6:	f380 8809 	msr	PSP, r0
 8002bba:	f3bf 8f6f 	isb	sy
 8002bbe:	4770      	bx	lr

08002bc0 <pxCurrentTCBConst>:
 8002bc0:	200002a0 	.word	0x200002a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002bc4:	bf00      	nop
 8002bc6:	bf00      	nop

08002bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8002bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bd2:	f383 8811 	msr	BASEPRI, r3
 8002bd6:	f3bf 8f6f 	isb	sy
 8002bda:	f3bf 8f4f 	dsb	sy
 8002bde:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002be0:	f7ff fc3e 	bl	8002460 <xTaskIncrementTick>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002bea:	4b06      	ldr	r3, [pc, #24]	; (8002c04 <SysTick_Handler+0x3c>)
 8002bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8002bfc:	bf00      	nop
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	e000ed04 	.word	0xe000ed04

08002c08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <vPortSetupTimerInterrupt+0x30>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <vPortSetupTimerInterrupt+0x34>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002c18:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <vPortSetupTimerInterrupt+0x38>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a09      	ldr	r2, [pc, #36]	; (8002c44 <vPortSetupTimerInterrupt+0x3c>)
 8002c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c22:	099b      	lsrs	r3, r3, #6
 8002c24:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <vPortSetupTimerInterrupt+0x40>)
 8002c26:	3b01      	subs	r3, #1
 8002c28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002c2a:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <vPortSetupTimerInterrupt+0x30>)
 8002c2c:	2207      	movs	r2, #7
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	bf00      	nop
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bc80      	pop	{r7}
 8002c36:	4770      	bx	lr
 8002c38:	e000e010 	.word	0xe000e010
 8002c3c:	e000e018 	.word	0xe000e018
 8002c40:	20000014 	.word	0x20000014
 8002c44:	10624dd3 	.word	0x10624dd3
 8002c48:	e000e014 	.word	0xe000e014

08002c4c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08a      	sub	sp, #40	; 0x28
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002c58:	f7ff fb4a 	bl	80022f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002c5c:	4b57      	ldr	r3, [pc, #348]	; (8002dbc <pvPortMalloc+0x170>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d101      	bne.n	8002c68 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002c64:	f000 f90c 	bl	8002e80 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002c68:	4b55      	ldr	r3, [pc, #340]	; (8002dc0 <pvPortMalloc+0x174>)
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f040 808c 	bne.w	8002d8e <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d01c      	beq.n	8002cb6 <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002c7c:	2208      	movs	r2, #8
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d013      	beq.n	8002cb6 <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f023 0307 	bic.w	r3, r3, #7
 8002c94:	3308      	adds	r3, #8
 8002c96:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f003 0307 	and.w	r3, r3, #7
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <pvPortMalloc+0x6a>
	__asm volatile
 8002ca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ca6:	f383 8811 	msr	BASEPRI, r3
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	f3bf 8f4f 	dsb	sy
 8002cb2:	617b      	str	r3, [r7, #20]
 8002cb4:	e7fe      	b.n	8002cb4 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d068      	beq.n	8002d8e <pvPortMalloc+0x142>
 8002cbc:	4b41      	ldr	r3, [pc, #260]	; (8002dc4 <pvPortMalloc+0x178>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d863      	bhi.n	8002d8e <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002cc6:	4b40      	ldr	r3, [pc, #256]	; (8002dc8 <pvPortMalloc+0x17c>)
 8002cc8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002cca:	4b3f      	ldr	r3, [pc, #252]	; (8002dc8 <pvPortMalloc+0x17c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cd0:	e004      	b.n	8002cdc <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8002cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d903      	bls.n	8002cee <pvPortMalloc+0xa2>
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1f1      	bne.n	8002cd2 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002cee:	4b33      	ldr	r3, [pc, #204]	; (8002dbc <pvPortMalloc+0x170>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d04a      	beq.n	8002d8e <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002cf8:	6a3b      	ldr	r3, [r7, #32]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	2208      	movs	r2, #8
 8002cfe:	4413      	add	r3, r2
 8002d00:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	1ad2      	subs	r2, r2, r3
 8002d12:	2308      	movs	r3, #8
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	429a      	cmp	r2, r3
 8002d18:	d91e      	bls.n	8002d58 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	4413      	add	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d22:	69bb      	ldr	r3, [r7, #24]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d009      	beq.n	8002d40 <pvPortMalloc+0xf4>
 8002d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d30:	f383 8811 	msr	BASEPRI, r3
 8002d34:	f3bf 8f6f 	isb	sy
 8002d38:	f3bf 8f4f 	dsb	sy
 8002d3c:	613b      	str	r3, [r7, #16]
 8002d3e:	e7fe      	b.n	8002d3e <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	1ad2      	subs	r2, r2, r3
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d52:	69b8      	ldr	r0, [r7, #24]
 8002d54:	f000 f8f6 	bl	8002f44 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d58:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <pvPortMalloc+0x178>)
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <pvPortMalloc+0x178>)
 8002d64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d66:	4b17      	ldr	r3, [pc, #92]	; (8002dc4 <pvPortMalloc+0x178>)
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <pvPortMalloc+0x180>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d203      	bcs.n	8002d7a <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d72:	4b14      	ldr	r3, [pc, #80]	; (8002dc4 <pvPortMalloc+0x178>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a15      	ldr	r2, [pc, #84]	; (8002dcc <pvPortMalloc+0x180>)
 8002d78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	4b10      	ldr	r3, [pc, #64]	; (8002dc0 <pvPortMalloc+0x174>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	431a      	orrs	r2, r3
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002d8e:	f7ff fabd 	bl	800230c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d009      	beq.n	8002db0 <pvPortMalloc+0x164>
 8002d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da0:	f383 8811 	msr	BASEPRI, r3
 8002da4:	f3bf 8f6f 	isb	sy
 8002da8:	f3bf 8f4f 	dsb	sy
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	e7fe      	b.n	8002dae <pvPortMalloc+0x162>
	return pvReturn;
 8002db0:	69fb      	ldr	r3, [r7, #28]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3728      	adds	r7, #40	; 0x28
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	200013dc 	.word	0x200013dc
 8002dc0:	200013e8 	.word	0x200013e8
 8002dc4:	200013e0 	.word	0x200013e0
 8002dc8:	200013d4 	.word	0x200013d4
 8002dcc:	200013e4 	.word	0x200013e4

08002dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d046      	beq.n	8002e70 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002de2:	2308      	movs	r3, #8
 8002de4:	425b      	negs	r3, r3
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4413      	add	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	4b20      	ldr	r3, [pc, #128]	; (8002e78 <vPortFree+0xa8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4013      	ands	r3, r2
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d109      	bne.n	8002e12 <vPortFree+0x42>
 8002dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e02:	f383 8811 	msr	BASEPRI, r3
 8002e06:	f3bf 8f6f 	isb	sy
 8002e0a:	f3bf 8f4f 	dsb	sy
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	e7fe      	b.n	8002e10 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d009      	beq.n	8002e2e <vPortFree+0x5e>
 8002e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	60bb      	str	r3, [r7, #8]
 8002e2c:	e7fe      	b.n	8002e2c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	685a      	ldr	r2, [r3, #4]
 8002e32:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <vPortFree+0xa8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d019      	beq.n	8002e70 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d115      	bne.n	8002e70 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	685a      	ldr	r2, [r3, #4]
 8002e48:	4b0b      	ldr	r3, [pc, #44]	; (8002e78 <vPortFree+0xa8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	401a      	ands	r2, r3
 8002e50:	693b      	ldr	r3, [r7, #16]
 8002e52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002e54:	f7ff fa4c 	bl	80022f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	4b07      	ldr	r3, [pc, #28]	; (8002e7c <vPortFree+0xac>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4413      	add	r3, r2
 8002e62:	4a06      	ldr	r2, [pc, #24]	; (8002e7c <vPortFree+0xac>)
 8002e64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e66:	6938      	ldr	r0, [r7, #16]
 8002e68:	f000 f86c 	bl	8002f44 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8002e6c:	f7ff fa4e 	bl	800230c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002e70:	bf00      	nop
 8002e72:	3718      	adds	r7, #24
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bd80      	pop	{r7, pc}
 8002e78:	200013e8 	.word	0x200013e8
 8002e7c:	200013e0 	.word	0x200013e0

08002e80 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002e86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e8a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002e8c:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <prvHeapInit+0xac>)
 8002e8e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d00c      	beq.n	8002eb4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	3307      	adds	r3, #7
 8002e9e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	f023 0307 	bic.w	r3, r3, #7
 8002ea6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ea8:	68ba      	ldr	r2, [r7, #8]
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	4a1f      	ldr	r2, [pc, #124]	; (8002f2c <prvHeapInit+0xac>)
 8002eb0:	4413      	add	r3, r2
 8002eb2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002eb8:	4a1d      	ldr	r2, [pc, #116]	; (8002f30 <prvHeapInit+0xb0>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002ebe:	4b1c      	ldr	r3, [pc, #112]	; (8002f30 <prvHeapInit+0xb0>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	4413      	add	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002ecc:	2208      	movs	r2, #8
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	1a9b      	subs	r3, r3, r2
 8002ed2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f023 0307 	bic.w	r3, r3, #7
 8002eda:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <prvHeapInit+0xb4>)
 8002ee0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002ee2:	4b14      	ldr	r3, [pc, #80]	; (8002f34 <prvHeapInit+0xb4>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002eea:	4b12      	ldr	r3, [pc, #72]	; (8002f34 <prvHeapInit+0xb4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68fa      	ldr	r2, [r7, #12]
 8002efa:	1ad2      	subs	r2, r2, r3
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002f00:	4b0c      	ldr	r3, [pc, #48]	; (8002f34 <prvHeapInit+0xb4>)
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <prvHeapInit+0xb8>)
 8002f0e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	4a09      	ldr	r2, [pc, #36]	; (8002f3c <prvHeapInit+0xbc>)
 8002f16:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f18:	4b09      	ldr	r3, [pc, #36]	; (8002f40 <prvHeapInit+0xc0>)
 8002f1a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f1e:	601a      	str	r2, [r3, #0]
}
 8002f20:	bf00      	nop
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	200003d4 	.word	0x200003d4
 8002f30:	200013d4 	.word	0x200013d4
 8002f34:	200013dc 	.word	0x200013dc
 8002f38:	200013e4 	.word	0x200013e4
 8002f3c:	200013e0 	.word	0x200013e0
 8002f40:	200013e8 	.word	0x200013e8

08002f44 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f4c:	4b27      	ldr	r3, [pc, #156]	; (8002fec <prvInsertBlockIntoFreeList+0xa8>)
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	e002      	b.n	8002f58 <prvInsertBlockIntoFreeList+0x14>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d8f7      	bhi.n	8002f52 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	d108      	bne.n	8002f86 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	685a      	ldr	r2, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	441a      	add	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	68ba      	ldr	r2, [r7, #8]
 8002f90:	441a      	add	r2, r3
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d118      	bne.n	8002fcc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	4b14      	ldr	r3, [pc, #80]	; (8002ff0 <prvInsertBlockIntoFreeList+0xac>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d00d      	beq.n	8002fc2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685a      	ldr	r2, [r3, #4]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	441a      	add	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	601a      	str	r2, [r3, #0]
 8002fc0:	e008      	b.n	8002fd4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002fc2:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <prvInsertBlockIntoFreeList+0xac>)
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	601a      	str	r2, [r3, #0]
 8002fca:	e003      	b.n	8002fd4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002fd4:	68fa      	ldr	r2, [r7, #12]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d002      	beq.n	8002fe2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	200013d4 	.word	0x200013d4
 8002ff0:	200013dc 	.word	0x200013dc

08002ff4 <__libc_init_array>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	2500      	movs	r5, #0
 8002ff8:	4e0c      	ldr	r6, [pc, #48]	; (800302c <__libc_init_array+0x38>)
 8002ffa:	4c0d      	ldr	r4, [pc, #52]	; (8003030 <__libc_init_array+0x3c>)
 8002ffc:	1ba4      	subs	r4, r4, r6
 8002ffe:	10a4      	asrs	r4, r4, #2
 8003000:	42a5      	cmp	r5, r4
 8003002:	d109      	bne.n	8003018 <__libc_init_array+0x24>
 8003004:	f000 f822 	bl	800304c <_init>
 8003008:	2500      	movs	r5, #0
 800300a:	4e0a      	ldr	r6, [pc, #40]	; (8003034 <__libc_init_array+0x40>)
 800300c:	4c0a      	ldr	r4, [pc, #40]	; (8003038 <__libc_init_array+0x44>)
 800300e:	1ba4      	subs	r4, r4, r6
 8003010:	10a4      	asrs	r4, r4, #2
 8003012:	42a5      	cmp	r5, r4
 8003014:	d105      	bne.n	8003022 <__libc_init_array+0x2e>
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800301c:	4798      	blx	r3
 800301e:	3501      	adds	r5, #1
 8003020:	e7ee      	b.n	8003000 <__libc_init_array+0xc>
 8003022:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003026:	4798      	blx	r3
 8003028:	3501      	adds	r5, #1
 800302a:	e7f2      	b.n	8003012 <__libc_init_array+0x1e>
 800302c:	080030f0 	.word	0x080030f0
 8003030:	080030f0 	.word	0x080030f0
 8003034:	080030f0 	.word	0x080030f0
 8003038:	080030f4 	.word	0x080030f4

0800303c <memset>:
 800303c:	4603      	mov	r3, r0
 800303e:	4402      	add	r2, r0
 8003040:	4293      	cmp	r3, r2
 8003042:	d100      	bne.n	8003046 <memset+0xa>
 8003044:	4770      	bx	lr
 8003046:	f803 1b01 	strb.w	r1, [r3], #1
 800304a:	e7f9      	b.n	8003040 <memset+0x4>

0800304c <_init>:
 800304c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304e:	bf00      	nop
 8003050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003052:	bc08      	pop	{r3}
 8003054:	469e      	mov	lr, r3
 8003056:	4770      	bx	lr

08003058 <_fini>:
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	bf00      	nop
 800305c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800305e:	bc08      	pop	{r3}
 8003060:	469e      	mov	lr, r3
 8003062:	4770      	bx	lr
